this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
we died in cardEffect
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
We're dying in numActions
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 6
this is where we die
card: 6
this is where we die
card: 6
this is where we die
card: 6
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
We're dying in numActions
We're dying in numActions
We're dying in numActions
We're dying in numActions
this is where we die
card: 6
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 6
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 6
this is where we die
card: 6
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 6
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 6
We're dying in numActions
We're dying in numActions
we died in cardEffect
this is where we die
card: 6
this is where we die
card: 6
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
we died in cardEffect
this is where we die
card: 4
we died in cardEffect
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 6
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 6
this is where we die
card: 4
we died in cardEffect
this is where we die
card: 6
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
We're dying in numActions
We're dying in numActions
We're dying in numActions
this is where we die
card: 4
this is where we die
card: 6
this is where we die
card: 6
this is where we die
card: 6
this is where we die
card: 6
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 6
this is where we die
card: 4
this is where we die
card: 4
we died in cardEffect
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 6
this is where we die
card: 4
this is where we die
card: 6
this is where we die
card: 6
We're dying in numActions
We're dying in numActions
We're dying in numActions
We're dying in numActions
We're dying in numActions
We're dying in numActions
this is where we die
card: 6
this is where we die
card: 6
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
We're dying in numActions
We're dying in numActions
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 6
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 6
this is where we die
card: 6
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 6
this is where we die
card: 6
this is where we die
card: 6
this is where we die
card: 4
this is where we die
card: 6
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 6
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 6
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 6
this is where we die
card: 6
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 6
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 6
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 6
this is where we die
card: 6
this is where we die
card: 4
We're dying in numActions
we died in cardEffect
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
We're dying in numActions
We're dying in numActions
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
We're dying in numActions
We're dying in numActions
We're dying in numActions
We're dying in numActions
this is where we die
card: 4
we died in cardEffect
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
we died in cardEffect
this is where we die
card: 4
this is where we die
card: 4
we died in cardEffect
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
we died in cardEffect
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
we died in cardEffect
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
We're dying in numActions
We're dying in numActions
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
we died in cardEffect
this is where we die
card: 4
We're dying in numActions
We're dying in numActions
We're dying in numActions
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
we died in cardEffect
this is where we die
card: 4
this is where we die
card: 4
we died in cardEffect
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
We're dying in numActions
this is where we die
card: 4
this is where we die
card: 4
We're dying in numActions
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
we died in cardEffect
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
we died in cardEffect
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
we died in cardEffect
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
We're dying in numActions
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
We're dying in numActions
this is where we die
card: 6
this is where we die
card: 6
this is where we die
card: 6
this is where we die
card: 6
this is where we die
card: 4
we died in cardEffect
this is where we die
card: 4
this is where we die
card: 4
we died in cardEffect
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 6
this is where we die
card: 4
this is where we die
card: 6
this is where we die
card: 4
this is where we die
card: 6
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 6
we died in cardEffect
this is where we die
card: 4
this is where we die
card: 6
We're dying in numActions
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 6
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 6
we died in cardEffect
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 6
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
We're dying in numActions
We're dying in numActions
We're dying in numActions
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 6
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
we died in cardEffect
this is where we die
card: 4
this is where we die
card: 4
We're dying in numActions
We're dying in numActions
We're dying in numActions
We're dying in numActions
We're dying in numActions
We're dying in numActions
We're dying in numActions
this is where we die
card: 6
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 6
We're dying in numActions
this is where we die
card: 4
this is where we die
card: 4
we died in cardEffect
this is where we die
card: 6
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 6
this is where we die
card: 4
We're dying in numActions
We're dying in numActions
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
We're dying in numActions
We're dying in numActions
We're dying in numActions
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
we died in cardEffect
this is where we die
card: 6
this is where we die
card: 4
We're dying in numActions
We're dying in numActions
We're dying in numActions
We're dying in numActions
we died in cardEffect
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
We're dying in numActions
We're dying in numActions
We're dying in numActions
this is where we die
card: 4
this is where we die
card: 6
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 6
we died in cardEffect
this is where we die
card: 6
this is where we die
card: 4
this is where we die
card: 6
We're dying in numActions
We're dying in numActions
we died in cardEffect
this is where we die
card: 4
this is where we die
card: 6
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
this is where we die
card: 4
profiling:/nfs/stak/students/h/horvatha/newCS362/cs362w16_horvatha/dominion/dominion.gcda:Merge mismatch for summaries
profiling:/nfs/stak/students/h/horvatha/newCS362/cs362w16_horvatha/dominion/rngs.gcda:Merge mismatch for summaries
DEBUG: k[0] = 12
DEBUG: k[1] = 16
DEBUG: k[2] = 26
DEBUG: k[3] = 8
DEBUG: k[4] = 9
DEBUG: k[5] = 25
DEBUG: k[6] = 15
DEBUG: k[7] = 14
DEBUG: k[8] = 11
DEBUG: k[9] = 17
DEBUG: number of players is 2
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 3
Entering buyCard...
You do not have enough money to buy that. You have 3 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 2
Entering buyCard...
You do not have enough money to buy that. You have 3 coins.
Player 2 failed in buying a card
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 2
Entering buyCard...
You bought card number 14 for 3 coins. You now have 0 buys and 1 coins.
Player 1 bought 14
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 0
Entering buyCard...
You do not have enough money to buy that. You have 4 coins.
Player 2 failed in buying a card
End player 2's turn
Deck count now: 11
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 0
Entering buyCard...
You do not have enough money to buy that. You have 3 coins.
Player 1 failed in buying a card
End player 1's turn
Deck count now: 10
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 4
Entering buyCard...
You do not have enough money to buy that. You have 3 coins.
Player 2 failed in buying a card
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 2
Entering buyCard...
You bought card number 15 for 4 coins. You now have 0 buys and 0 coins.
Player 1 bought 15
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 4
Entering buyCard...
You bought card number 26 for 4 coins. You now have 0 buys and 0 coins.
Player 2 bought 26
End player 2's turn
Current hand count: 0
Deck count now: 11
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 3
Entering buyCard...
You do not have enough money to buy that. You have 1 coins.
Player 1 failed in buying a card
End player 1's turn
Deck count now: 11
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 1
Entering buyCard...
You do not have enough money to buy that. You have 3 coins.
Player 2 failed in buying a card
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 3
DEBUG: in first if before playCard and we're going to play 14
Current hand count: 5
Player 1 played card 4
Entering buyCard...
You bought card number 8 for 5 coins. You now have 0 buys and 0 coins.
Player 1 bought 8
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 3
Entering buyCard...
You bought card number 26 for 4 coins. You now have 0 buys and 0 coins.
Player 2 bought 26
End player 2's turn
Current hand count: 0
Deck count now: 11
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 0
Entering buyCard...
You do not have enough money to buy that. You have 4 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Deck count now: 11
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 1
DEBUG: in first if before playCard and we're going to play 26
DEBUG: card was unable to be played
Entering buyCard...
You do not have enough money to buy that. You have 2 coins.
Player 2 failed in buying a card
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 2
Entering buyCard...
You bought card number 16 for 3 coins. You now have 0 buys and 0 coins.
Player 1 bought 16
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 1
Entering buyCard...
You do not have enough money to buy that. You have 4 coins.
Player 2 failed in buying a card
End player 2's turn
Current hand count: 0
Current hand count: 1
Deck count now: 11
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 3
Entering buyCard...
You do not have enough money to buy that. You have 1 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Deck count now: 10
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 0
DEBUG: in first if before playCard and we're going to play 26
Player 2 played card 26
Entering buyCard...
You do not have enough money to buy that. You have 1 coins.
Player 2 failed in buying a card
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 1
Entering buyCard...
You do not have enough money to buy that. You have 3 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 0
Player 2 bought province
Entering buyCard...
You bought card number 3 for 8 coins. You now have 0 buys and 5 coins.
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Deck count now: 10
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 3
Entering buyCard...
You bought card number 14 for 3 coins. You now have 0 buys and 1 coins.
Player 1 bought 14
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 4
Entering buyCard...
You do not have enough money to buy that. You have 3 coins.
Player 2 failed in buying a card
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 4
DEBUG: in first if before playCard and we're going to play 8
Current hand count: 5
Current hand count: 6
Current hand count: 7
Deck count now: 6
Current hand count: 8
Current hand count: 0
Player 1 played card 4
Entering buyCard...
You bought card number 26 for 4 coins. You now have 1 buys and 0 coins.
Player 1 bought 26
End player 1's turn
Deck count now: 14
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 3
Entering buyCard...
You bought card number 11 for 5 coins. You now have 0 buys and 0 coins.
Player 2 bought 11
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 3
Entering buyCard...
You do not have enough money to buy that. You have 3 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 4
Entering buyCard...
You bought card number 26 for 4 coins. You now have 0 buys and 1 coins.
Player 2 bought 26
End player 2's turn
Deck count now: 14
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 3
Entering buyCard...
You do not have enough money to buy that. You have 3 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Deck count now: 12
Current hand count: 4
DEBUG: value of handPos is: 2
Entering buyCard...
You bought card number 8 for 5 coins. You now have 0 buys and 2 coins.
Player 2 bought 8
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 4
Entering buyCard...
You do not have enough money to buy that. You have 2 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 4
Entering buyCard...
You bought card number 12 for 4 coins. You now have 0 buys and 1 coins.
Player 2 bought 12
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Deck count now: 10
Current hand count: 4
DEBUG: value of handPos is: 2
Entering buyCard...
You do not have enough money to buy that. You have 3 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 2
Entering buyCard...
You bought card number 12 for 4 coins. You now have 0 buys and 1 coins.
Player 2 bought 12
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 1
DEBUG: in first if before playCard and we're going to play 15
Player 1 played card 15
Entering buyCard...
You do not have enough money to buy that. You have 2 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Deck count now: 18
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 0
DEBUG: in first if before playCard and we're going to play 11
DEBUG: card was unable to be played
Entering buyCard...
You bought card number 14 for 3 coins. You now have 0 buys and 4 coins.
Player 2 bought 14
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Deck count now: 11
Current hand count: 4
DEBUG: value of handPos is: 2
Entering buyCard...
You bought card number 14 for 3 coins. You now have 0 buys and 0 coins.
Player 1 bought 14
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 4
DEBUG: in first if before playCard and we're going to play 12
DEBUG: card was unable to be played
Entering buyCard...
You do not have enough money to buy that. You have 1 coins.
Player 2 failed in buying a card
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 1
DEBUG: in first if before playCard and we're going to play 26
DEBUG: card was unable to be played
Entering buyCard...
You do not have enough money to buy that. You have 3 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 0
Entering buyCard...
You bought card number 12 for 4 coins. You now have 0 buys and 1 coins.
Player 2 bought 12
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 3
Entering buyCard...
You do not have enough money to buy that. You have 1 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Deck count now: 17
Current hand count: 4
DEBUG: value of handPos is: 3
Entering buyCard...
You bought card number 15 for 4 coins. You now have 0 buys and 0 coins.
Player 2 bought 15
End player 2's turn
Deck count now: 16
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 0
Entering buyCard...
You do not have enough money to buy that. You have 1 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 1
DEBUG: in first if before playCard and we're going to play 12
DEBUG: card was unable to be played
Entering buyCard...
You bought card number 16 for 3 coins. You now have 0 buys and 0 coins.
Player 2 bought 16
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 1
Entering buyCard...
You do not have enough money to buy that. You have 3 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 4
Entering buyCard...
You bought card number 14 for 3 coins. You now have 0 buys and 0 coins.
Player 2 bought 14
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 3
Entering buyCard...
You do not have enough money to buy that. You have 3 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 3
DEBUG: in first if before playCard and we're going to play 26
Player 2 played card -1
Entering buyCard...
You bought card number 12 for 4 coins. You now have 0 buys and 3 coins.
Player 2 bought 12
End player 2's turn
Current hand count: 0
Deck count now: 15
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 1
Entering buyCard...
You do not have enough money to buy that. You have 1 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 2
Player 2 bought province
Entering buyCard...
You bought card number 3 for 8 coins. You now have 0 buys and 4 coins.
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 3
Entering buyCard...
You bought card number 15 for 4 coins. You now have 0 buys and 0 coins.
Player 1 bought 15
End player 1's turn
Deck count now: 28
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 4
Entering buyCard...
You bought card number 14 for 3 coins. You now have 0 buys and 1 coins.
Player 2 bought 14
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 0
Entering buyCard...
You do not have enough money to buy that. You have 2 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 1
DEBUG: in first if before playCard and we're going to play 12
DEBUG: card was unable to be played
Entering buyCard...
You bought card number 4 for 0 coins. You now have 0 buys and 0 coins.
Player 2 bought copper
End player 2's turn
Current hand count: 0
Deck count now: 16
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 0
Entering buyCard...
You bought card number 12 for 4 coins. You now have 0 buys and 0 coins.
Player 1 bought 12
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 2
Player 2 bought province
Entering buyCard...
You bought card number 3 for 8 coins. You now have 0 buys and 2 coins.
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 0
DEBUG: in first if before playCard and we're going to play 14
Current hand count: 5
Player 1 played card 14
Entering buyCard...
You bought card number 4 for 0 coins. You now have 0 buys and 0 coins.
Player 1 bought copper
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 0
DEBUG: in first if before playCard and we're going to play 15
Player 2 played card 15
Entering buyCard...
You bought card number 11 for 5 coins. You now have 1 buys and 2 coins.
Player 2 bought 11
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 1
DEBUG: in first if before playCard and we're going to play 15
Player 1 played card 15
Entering buyCard...
You bought card number 16 for 3 coins. You now have 1 buys and 0 coins.
Player 1 bought 16
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 1
Entering buyCard...
You bought card number 8 for 5 coins. You now have 0 buys and 1 coins.
Player 2 bought 8
End player 2's turn
Current hand count: 0
Deck count now: 19
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 2
Entering buyCard...
You do not have enough money to buy that. You have 1 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Deck count now: 31
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 4
Entering buyCard...
You do not have enough money to buy that. You have 3 coins.
Player 2 failed in buying a card
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 3
DEBUG: in first if before playCard and we're going to play 15
Player 1 played card 15
Entering buyCard...
You do not have enough money to buy that. You have 2 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 1
Entering buyCard...
You do not have enough money to buy that. You have 1 coins.
Player 2 failed in buying a card
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 4
Entering buyCard...
You do not have enough money to buy that. You have 2 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 3
Entering buyCard...
You bought card number 25 for 4 coins. You now have 0 buys and 0 coins.
Player 2 bought 25
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 1
Entering buyCard...
You do not have enough money to buy that. You have 3 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 0
Entering buyCard...
You bought card number 26 for 4 coins. You now have 0 buys and 2 coins.
Player 2 bought 26
End player 2's turn
Deck count now: 21
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 4
Entering buyCard...
You bought card number 9 for 4 coins. You now have 0 buys and 0 coins.
Player 1 bought 9
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 2
Player 2 bought province
Entering buyCard...
You bought card number 3 for 8 coins. You now have 0 buys and 1 coins.
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 2
Entering buyCard...
You do not have enough money to buy that. You have 1 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 4
Entering buyCard...
You bought card number 26 for 4 coins. You now have 0 buys and 0 coins.
Player 2 bought 26
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 2
Entering buyCard...
You do not have enough money to buy that. You have 1 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Deck count now: 34
Current hand count: 4
DEBUG: value of handPos is: 0
Entering buyCard...
You do not have enough money to buy that. You have 3 coins.
Player 2 failed in buying a card
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 4
DEBUG: in first if before playCard and we're going to play 16
Current hand count: 5
Player 1 played card 15
Entering buyCard...
You do not have enough money to buy that. You have 2 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 2
Entering buyCard...
You bought card number 4 for 0 coins. You now have 0 buys and 0 coins.
Player 2 bought copper
End player 2's turn
Deck count now: 21
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 3
Entering buyCard...
You bought card number 12 for 4 coins. You now have 0 buys and 0 coins.
Player 1 bought 12
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 4
Entering buyCard...
You bought card number 26 for 4 coins. You now have 0 buys and 1 coins.
Player 2 bought 26
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 4
Entering buyCard...
You do not have enough money to buy that. You have 1 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 1
Entering buyCard...
You bought card number 14 for 3 coins. You now have 0 buys and 3 coins.
Player 2 bought 14
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 2
DEBUG: in first if before playCard and we're going to play 16
Current hand count: 5
Player 1 played card 15
Entering buyCard...
You do not have enough money to buy that. You have 1 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 3
Entering buyCard...
You bought card number 25 for 4 coins. You now have 0 buys and 1 coins.
Player 2 bought 25
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 2
Entering buyCard...
You do not have enough money to buy that. You have 2 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 0
Entering buyCard...
You bought card number 25 for 4 coins. You now have 0 buys and 0 coins.
Player 2 bought 25
End player 2's turn
Deck count now: 21
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 3
Entering buyCard...
You do not have enough money to buy that. You have 2 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 4
Entering buyCard...
You bought card number 12 for 4 coins. You now have 0 buys and 3 coins.
Player 2 bought 12
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 4
DEBUG: in first if before playCard and we're going to play 9
Deck Count: 21
Deck Count: 22
Player 1 played card 9
Entering buyCard...
You do not have enough money to buy that. You have 1 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 1
DEBUG: in first if before playCard and we're going to play 12
DEBUG: card was unable to be played
Entering buyCard...
You do not have enough money to buy that. You have 2 coins.
Player 2 failed in buying a card
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 2
Entering buyCard...
You do not have enough money to buy that. You have 2 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Deck count now: 21
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 1
Entering buyCard...
You do not have enough money to buy that. You have 2 coins.
Player 2 failed in buying a card
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 2
DEBUG: in first if before playCard and we're going to play 15
Player 1 played card 15
Entering buyCard...
You do not have enough money to buy that. You have 2 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 1
Entering buyCard...
You do not have enough money to buy that. You have 3 coins.
Player 2 failed in buying a card
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 0
Entering buyCard...
You bought card number 4 for 0 coins. You now have 0 buys and 0 coins.
Player 1 bought copper
End player 1's turn
Current hand count: 0
Current hand count: 1
Deck count now: 21
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 3
Entering buyCard...
You do not have enough money to buy that. You have 2 coins.
Player 2 failed in buying a card
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 1
DEBUG: in first if before playCard and we're going to play 14
Current hand count: 5
Player 1 played card 1
Entering buyCard...
You do not have enough money to buy that. You have 1 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 2
DEBUG: in first if before playCard and we're going to play 15
Player 2 played card 15
Entering buyCard...
You bought card number 12 for 4 coins. You now have 1 buys and 0 coins.
Player 2 bought 12
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 0
Entering buyCard...
You do not have enough money to buy that. You have 1 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Deck count now: 21
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 3
DEBUG: in first if before playCard and we're going to play 12
DEBUG: card was unable to be played
Entering buyCard...
You do not have enough money to buy that. You have 2 coins.
Player 2 failed in buying a card
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 4
Entering buyCard...
You do not have enough money to buy that. You have 2 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 3
Entering buyCard...
You bought card number 15 for 4 coins. You now have 0 buys and 0 coins.
Player 2 bought 15
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 0
Entering buyCard...
You do not have enough money to buy that. You have 1 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Deck count now: 21
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 0
Entering buyCard...
You do not have enough money to buy that. You have 1 coins.
Player 2 failed in buying a card
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 0
DEBUG: in first if before playCard and we're going to play 26
DEBUG: card was unable to be played
Entering buyCard...
You do not have enough money to buy that. You have 2 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 3
DEBUG: in first if before playCard and we're going to play 12
DEBUG: card was unable to be played
Entering buyCard...
You do not have enough money to buy that. You have 2 coins.
Player 2 failed in buying a card
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 4
Entering buyCard...
You do not have enough money to buy that. You have 2 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Deck count now: 20
Current hand count: 4
DEBUG: value of handPos is: 0
DEBUG: in first if before playCard and we're going to play 12
DEBUG: card was unable to be played
Entering buyCard...
You do not have enough money to buy that. You have 2 coins.
Player 2 failed in buying a card
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 1
Entering buyCard...
You bought card number 4 for 0 coins. You now have 0 buys and 0 coins.
Player 1 bought copper
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 2
Entering buyCard...
You do not have enough money to buy that. You have 3 coins.
Player 2 failed in buying a card
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 3
DEBUG: in first if before playCard and we're going to play 26
DEBUG: card was unable to be played
Entering buyCard...
You do not have enough money to buy that. You have 2 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Deck count now: 21
Current hand count: 4
DEBUG: value of handPos is: 1
Entering buyCard...
You do not have enough money to buy that. You have 2 coins.
Player 2 failed in buying a card
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 0
Entering buyCard...
You do not have enough money to buy that. You have 2 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 2
Entering buyCard...
You do not have enough money to buy that. You have 1 coins.
Player 2 failed in buying a card
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 0
Entering buyCard...
You do not have enough money to buy that. You have 2 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 0
Entering buyCard...
You do not have enough money to buy that. You have 3 coins.
Player 2 failed in buying a card
End player 2's turn
Deck count now: 25
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 3
DEBUG: in first if before playCard and we're going to play 15
Player 1 played card 15
Entering buyCard...
You do not have enough money to buy that. You have 2 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 3
Entering buyCard...
You do not have enough money to buy that. You have 3 coins.
Player 2 failed in buying a card
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 1
Entering buyCard...
You do not have enough money to buy that. You have 2 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 1
Entering buyCard...
You do not have enough money to buy that. You have 3 coins.
Player 2 failed in buying a card
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 0
DEBUG: in first if before playCard and we're going to play 12
DEBUG: card was unable to be played
Entering buyCard...
You bought card number 4 for 0 coins. You now have 0 buys and 0 coins.
Player 1 bought copper
End player 1's turn
Deck count now: 26
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 3
Entering buyCard...
You do not have enough money to buy that. You have 1 coins.
Player 2 failed in buying a card
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 4
DEBUG: in first if before playCard and we're going to play 9
Deck Count: 26
Deck Count: 27
Player 1 played card 9
Entering buyCard...
You do not have enough money to buy that. You have 3 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 2
Entering buyCard...
You do not have enough money to buy that. You have 1 coins.
Player 2 failed in buying a card
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 1
Entering buyCard...
You do not have enough money to buy that. You have 3 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 3
Entering buyCard...
You do not have enough money to buy that. You have 2 coins.
Player 2 failed in buying a card
End player 2's turn
Current hand count: 0
Deck count now: 26
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 2
Entering buyCard...
You do not have enough money to buy that. You have 3 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 2
DEBUG: in first if before playCard and we're going to play 12
DEBUG: card was unable to be played
Entering buyCard...
You do not have enough money to buy that. You have 2 coins.
Player 2 failed in buying a card
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 1
DEBUG: in first if before playCard and we're going to play 12
DEBUG: card was unable to be played
Entering buyCard...
You do not have enough money to buy that. You have 3 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 0
DEBUG: in first if before playCard and we're going to play 15
Player 2 played card 15
Entering buyCard...
You do not have enough money to buy that. You have 1 coins.
Player 2 failed in buying a card
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 0
Entering buyCard...
You do not have enough money to buy that. You have 1 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Deck count now: 25
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 3
Entering buyCard...
You do not have enough money to buy that. You have 1 coins.
Player 2 failed in buying a card
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 2
DEBUG: in first if before playCard and we're going to play 9
None of that card left, sorry!
Cards Left: 0
Player 1 played card 9
Entering buyCard...
You do not have enough money to buy that. You have 1 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 3
Entering buyCard...
You bought card number 16 for 3 coins. You now have 0 buys and 0 coins.
Player 2 bought 16
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 0
Entering buyCard...
You do not have enough money to buy that. You have 3 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 4
Entering buyCard...
You do not have enough money to buy that. You have 2 coins.
Player 2 failed in buying a card
End player 2's turn
Current hand count: 0
Current hand count: 1
Deck count now: 26
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 4
Entering buyCard...
You do not have enough money to buy that. You have 2 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 2
Entering buyCard...
You bought card number 4 for 0 coins. You now have 0 buys and 0 coins.
Player 2 bought copper
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 0
Entering buyCard...
You bought card number 25 for 4 coins. You now have 0 buys and 0 coins.
Player 1 bought 25
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 0
DEBUG: in first if before playCard and we're going to play 15
Player 2 played card 15
Entering buyCard...
You bought card number 4 for 0 coins. You now have 1 buys and 0 coins.
Player 2 bought copper
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 2
DEBUG: in first if before playCard and we're going to play 12
DEBUG: card was unable to be played
Entering buyCard...
You do not have enough money to buy that. You have 2 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Deck count now: 28
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 4
Entering buyCard...
You bought card number 26 for 4 coins. You now have 0 buys and 0 coins.
Player 2 bought 26
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 2
Entering buyCard...
You do not have enough money to buy that. You have 2 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 2
DEBUG: in first if before playCard and we're going to play 12
DEBUG: card was unable to be played
Entering buyCard...
You do not have enough money to buy that. You have 2 coins.
Player 2 failed in buying a card
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 1
Entering buyCard...
You do not have enough money to buy that. You have 3 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 1
DEBUG: in first if before playCard and we're going to play 9
None of that card left, sorry!
Cards Left: 0
Player 2 played card 9
Entering buyCard...
You bought card number 4 for 0 coins. You now have 0 buys and 0 coins.
Player 2 bought copper
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 1
DEBUG: in first if before playCard and we're going to play 12
DEBUG: card was unable to be played
Entering buyCard...
You do not have enough money to buy that. You have 2 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Deck count now: 32
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 1
DEBUG: in first if before playCard and we're going to play 16
Current hand count: 5
Player 2 played card -1
Entering buyCard...
You do not have enough money to buy that. You have 2 coins.
Player 2 failed in buying a card
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 2
DEBUG: in first if before playCard and we're going to play 25
Player 1 played card 25
Entering buyCard...
You do not have enough money to buy that. You have 1 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 0
Entering buyCard...
You bought card number 9 for 4 coins. You now have 0 buys and 0 coins.
Player 2 bought 9
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 4
Entering buyCard...
You do not have enough money to buy that. You have 3 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 1
Entering buyCard...
You do not have enough money to buy that. You have 2 coins.
Player 2 failed in buying a card
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 2
DEBUG: in first if before playCard and we're going to play 26
Player 1 played card 12
Entering buyCard...
You do not have enough money to buy that. You have 1 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 3
Player 2 bought province
Entering buyCard...
You bought card number 3 for 8 coins. You now have 0 buys and 5 coins.
End player 2's turn
Current hand count: 0
Deck count now: 35
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 0
DEBUG: in first if before playCard and we're going to play 12
DEBUG: card was unable to be played
Entering buyCard...
You do not have enough money to buy that. You have 2 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 3
DEBUG: in first if before playCard and we're going to play 12
DEBUG: card was unable to be played
Entering buyCard...
You do not have enough money to buy that. You have 2 coins.
Player 2 failed in buying a card
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 1
Player 1 bought province
Entering buyCard...
You bought card number 3 for 8 coins. You now have 0 buys and 0 coins.
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 2
Entering buyCard...
You do not have enough money to buy that. You have 4 coins.
Player 2 failed in buying a card
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 2
Entering buyCard...
You bought card number 12 for 4 coins. You now have 0 buys and 0 coins.
Player 1 bought 12
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 3
Entering buyCard...
You bought card number 16 for 3 coins. You now have 0 buys and 2 coins.
Player 2 bought 16
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 4
Entering buyCard...
You bought card number 4 for 0 coins. You now have 0 buys and 0 coins.
Player 1 bought copper
End player 1's turn
Current hand count: 0
Deck count now: 39
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 4
DEBUG: in first if before playCard and we're going to play 12
DEBUG: card was unable to be played
Entering buyCard...
You bought card number 26 for 4 coins. You now have 0 buys and 0 coins.
Player 2 bought 26
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 4
DEBUG: in first if before playCard and we're going to play 25
Player 1 played card 25
Entering buyCard...
You do not have enough money to buy that. You have 1 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 3
DEBUG: in first if before playCard and we're going to play 16
Current hand count: 5
Player 2 played card 1
Entering buyCard...
You do not have enough money to buy that. You have 3 coins.
Player 2 failed in buying a card
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 3
Entering buyCard...
You bought card number 8 for 5 coins. You now have 0 buys and 0 coins.
Player 1 bought 8
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 3
Entering buyCard...
You do not have enough money to buy that. You have 2 coins.
Player 2 failed in buying a card
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 0
Entering buyCard...
You bought card number 26 for 4 coins. You now have 0 buys and 0 coins.
Player 1 bought 26
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 0
DEBUG: in first if before playCard and we're going to play 12
DEBUG: card was unable to be played
Entering buyCard...
You do not have enough money to buy that. You have 3 coins.
Player 2 failed in buying a card
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Deck count now: 38
Current hand count: 4
DEBUG: value of handPos is: 3
Entering buyCard...
You bought card number 16 for 3 coins. You now have 0 buys and 3 coins.
Player 1 bought 16
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 2
Entering buyCard...
There are not any of that type of card left
Player 2 failed in buying a card
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 1
DEBUG: in first if before playCard and we're going to play 8
Current hand count: 5
Current hand count: 6
Current hand count: 7
Current hand count: 8
Player 1 played card 9
Entering buyCard...
You bought card number 12 for 4 coins. You now have 1 buys and 3 coins.
Player 1 bought 12
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 1
Entering buyCard...
You do not have enough money to buy that. You have 1 coins.
Player 2 failed in buying a card
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 0
Entering buyCard...
You do not have enough money to buy that. You have 2 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 4
Entering buyCard...
You bought card number 8 for 5 coins. You now have 0 buys and 1 coins.
Player 2 bought 8
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 2
Entering buyCard...
You do not have enough money to buy that. You have 2 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Deck count now: 41
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 1
DEBUG: in first if before playCard and we're going to play 12
DEBUG: card was unable to be played
Entering buyCard...
You bought card number 4 for 0 coins. You now have 0 buys and 0 coins.
Player 2 bought copper
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 3
Entering buyCard...
There are not any of that type of card left
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 3
DEBUG: in first if before playCard and we're going to play 8
Current hand count: 5
Current hand count: 6
Current hand count: 7
Current hand count: 8
Player 2 played card 4
Player 2 bought province
Entering buyCard...
You bought card number 3 for 8 coins. You now have 1 buys and 1 coins.
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 2
Entering buyCard...
You bought card number 15 for 4 coins. You now have 0 buys and 1 coins.
Player 1 bought 15
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 3
Entering buyCard...
You bought card number 25 for 4 coins. You now have 0 buys and 0 coins.
Player 2 bought 25
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 0
DEBUG: in first if before playCard and we're going to play 9
None of that card left, sorry!
Cards Left: 0
Player 1 played card 9
Entering buyCard...
You do not have enough money to buy that. You have 1 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 0
Entering buyCard...
You do not have enough money to buy that. You have 2 coins.
Player 2 failed in buying a card
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 3
DEBUG: in first if before playCard and we're going to play 12
DEBUG: card was unable to be played
Entering buyCard...
There are not any of that type of card left
Player 1 failed in buying a card
End player 1's turn
Deck count now: 47
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 2
Entering buyCard...
You do not have enough money to buy that. You have 2 coins.
Player 2 failed in buying a card
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 0
Entering buyCard...
You do not have enough money to buy that. You have 3 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 2
Entering buyCard...
You do not have enough money to buy that. You have 1 coins.
Player 2 failed in buying a card
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 0
DEBUG: in first if before playCard and we're going to play 25
Player 1 played card 25
Entering buyCard...
You do not have enough money to buy that. You have 4 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 2
Entering buyCard...
You do not have enough money to buy that. You have 3 coins.
Player 2 failed in buying a card
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 4
DEBUG: in first if before playCard and we're going to play 9
None of that card left, sorry!
Cards Left: 0
Player 1 played card 9
Entering buyCard...
You bought card number 14 for 3 coins. You now have 0 buys and 2 coins.
Player 1 bought 14
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 0
DEBUG: in first if before playCard and we're going to play 16
Current hand count: 5
Player 2 played card 4
Entering buyCard...
There are not any of that type of card left
Player 2 failed in buying a card
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 3
Entering buyCard...
You do not have enough money to buy that. You have 2 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 1
DEBUG: in first if before playCard and we're going to play 12
DEBUG: card was unable to be played
Entering buyCard...
You bought card number 9 for 4 coins. You now have 0 buys and 0 coins.
Player 2 bought 9
End player 2's turn
Current hand count: 0
Deck count now: 47
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 2
DEBUG: in first if before playCard and we're going to play 9
None of that card left, sorry!
Cards Left: 0
Player 1 played card 9
Entering buyCard...
You do not have enough money to buy that. You have 4 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 2
DEBUG: in first if before playCard and we're going to play 12
DEBUG: card was unable to be played
Entering buyCard...
You do not have enough money to buy that. You have 1 coins.
Player 2 failed in buying a card
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 2
Entering buyCard...
You do not have enough money to buy that. You have 2 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 1
Entering buyCard...
You do not have enough money to buy that. You have 1 coins.
Player 2 failed in buying a card
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 4
Entering buyCard...
You do not have enough money to buy that. You have 1 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 2
Entering buyCard...
You do not have enough money to buy that. You have 2 coins.
Player 2 failed in buying a card
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 3
DEBUG: in first if before playCard and we're going to play 15
Player 1 played card 15
Entering buyCard...
You bought card number 17 for 5 coins. You now have 1 buys and 0 coins.
Player 1 bought 17
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 0
Entering buyCard...
You bought card number 11 for 5 coins. You now have 0 buys and 0 coins.
Player 2 bought 11
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 1
Entering buyCard...
You do not have enough money to buy that. You have 4 coins.
Player 1 failed in buying a card
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Deck count now: 47
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 3
DEBUG: in first if before playCard and we're going to play 12
DEBUG: card was unable to be played
Entering buyCard...
You do not have enough money to buy that. You have 3 coins.
Player 2 failed in buying a card
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 2
Entering buyCard...
You bought card number 14 for 3 coins. You now have 0 buys and 1 coins.
Player 1 bought 14
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 2
DEBUG: in first if before playCard and we're going to play 25
Player 2 played card 25
Entering buyCard...
You do not have enough money to buy that. You have 2 coins.
Player 2 failed in buying a card
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 2
Entering buyCard...
You bought card number 4 for 0 coins. You now have 0 buys and 0 coins.
Player 1 bought copper
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 3
DEBUG: in first if before playCard and we're going to play 26
DEBUG: card was unable to be played
Entering buyCard...
You do not have enough money to buy that. You have 4 coins.
Player 2 failed in buying a card
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 0
Entering buyCard...
You bought card number 14 for 3 coins. You now have 0 buys and 0 coins.
Player 1 bought 14
End player 1's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
DEBUG: value of handPos is: 3
Entering buyCard...
You do not have enough money to buy that. You have 2 coins.
Player 2 failed in buying a card
End player 2's turn
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
Ended game
File 'dominion.c'
Lines executed:66.96% of 572
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:17
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    88887:    8:int compare(const void* a, const void* b) {
    88887:    9:  if (*(int*)a > *(int*)b)
    40907:   10:    return 1;
    47980:   11:  if (*(int*)a < *(int*)b)
    17386:   12:    return -1;
    30594:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
       17:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       17:   44:  SelectStream(1);
       17:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       17:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       17:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      187:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
     1870:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
     1700:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       17:   73:  if (numPlayers == 2)
        -:   74:    {
        6:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
       11:   77:  else if (numPlayers == 3)
        -:   78:    {
        3:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        8:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       17:   87:  if (numPlayers == 2)
        -:   88:    {
        6:   89:      state->supplyCount[estate] = 8;
        6:   90:      state->supplyCount[duchy] = 8;
        6:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
       11:   95:      state->supplyCount[estate] = 12;
       11:   96:      state->supplyCount[duchy] = 12;
       11:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       17:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       17:  102:  state->supplyCount[silver] = 40;
       17:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      357:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     2805:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     2635:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      189:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       19:  115:		  if (numPlayers == 2){ 
        6:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
       13:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      151:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      170:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     2465:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       70:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       53:  140:      state->deckCount[i] = 0;
      212:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
      159:  143:	  state->deck[i][j] = estate;
      159:  144:	  state->deckCount[i]++;
        -:  145:	}
      424:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      371:  148:	  state->deck[i][j] = copper;
      371:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       70:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       53:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       70:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       53:  166:      state->handCount[i] = 0;
       53:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      476:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      459:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       17:  182:  state->outpostPlayed = 0;
       17:  183:  state->phase = 0;
       17:  184:  state->numActions = 1;
       17:  185:  state->numBuys = 1;
       17:  186:  state->playedCardCount = 0;
       17:  187:  state->whoseTurn = 0;
       17:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      102:  192:  for (it = 0; it < 5; it++){
       85:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
       17:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       17:  198:  return 0;
        -:  199:}
        -:  200:
     4948:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     4948:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     4948:  209:  if (state->deckCount[player] < 1)
     1393:  210:    return -1;
     3555:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    43225:  214:  while (state->deckCount[player] > 0) {
    36115:  215:    card = floor(Random() * state->deckCount[player]);
    36115:  216:    newDeck[newDeckPos] = state->deck[player][card];
    36115:  217:    newDeckPos++;
   155395:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   119280:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    36115:  221:    state->deckCount[player]--;
        -:  222:  }
    39670:  223:  for (i = 0; i < newDeckPos; i++) {
    36115:  224:    state->deck[player][i] = newDeck[i];
    36115:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     3555:  228:  return 0;
        -:  229:}
        -:  230:
    16575:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    16575:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    16575:  237:  if (state->phase != 0)
        -:  238:    {
        -:  239:      if(DEBUG){
    #####:  240:          fprintf(stderr, "This is where we're dying in phase check\n");
        -:  241:      }
    #####:  242:      return -1;
        -:  243:    }
        -:  244:	
        -:  245:  //check if player has enough actions
    16575:  246:  if ( state->numActions < 1 )
        -:  247:    {
        -:  248:      if(DEBUG){
     1393:  249:         fprintf(stderr, "We're dying in numActions\n");
        -:  250:      }
     1393:  251:      return -1;
        -:  252:    }
        -:  253:	
        -:  254:  //get card played
    15182:  255:  card = handCard(handPos, state);
        -:  256:	
        -:  257:  //check if selected card is an action
    15182:  258:  if ( card < adventurer || card > treasure_map )
        -:  259:    {
        -:  260:      if(DEBUG){
    12770:  261:        fprintf(stderr, "this is where we die\n");
    12770:  262:	fprintf(stderr, "card: %d\n", card);
        -:  263:      }
    12770:  264:      return -1;
        -:  265:    }
        -:  266:	
        -:  267:  //play card
     2412:  268:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  269:    { 
        -:  270:      if(DEBUG){
     1356:  271:          fprintf(stderr, "we died in cardEffect\n");
        -:  272:      }
     1356:  273:      return -1;
        -:  274:    }
        -:  275:	
        -:  276:  //reduce number of actions
     1056:  277:  state->numActions--;
        -:  278:
        -:  279:  //update coins (Treasure cards may be added with card draws)
     1056:  280:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  281:	
     1056:  282:  return 0;
        -:  283:}
        -:  284:
     7230:  285:int buyCard(int supplyPos, struct gameState *state) {
        -:  286:  int who;
        -:  287:  if (DEBUG){
     7230:  288:    printf("Entering buyCard...\n");
        -:  289:  }
        -:  290:
        -:  291:  // I don't know what to do about the phase thing.
        -:  292:
     7230:  293:  who = state->whoseTurn;
        -:  294:
     7230:  295:  if (state->numBuys < 1){
        -:  296:    if (DEBUG)
    #####:  297:      printf("You do not have any buys left\n");
    #####:  298:    return -1;
     7230:  299:  } else if (supplyCount(supplyPos, state) <1){
        -:  300:    if (DEBUG)
      663:  301:      printf("There are not any of that type of card left\n");
      663:  302:    return -1;
     6567:  303:  } else if (state->coins < getCost(supplyPos)){
        -:  304:    if (DEBUG) 
     5740:  305:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
     5740:  306:    return -1;
        -:  307:  } else {
      827:  308:    state->phase=1;
        -:  309:    //state->supplyCount[supplyPos]--;
      827:  310:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  311:  
      827:  312:    state->coins = (state->coins) - (getCost(supplyPos));
      827:  313:    state->numBuys--;
        -:  314:    if (DEBUG)
      827:  315:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  316:  }
        -:  317:
        -:  318:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  319:  //state->discardCount[who]++;
        -:  320:    
      827:  321:  return 0;
        -:  322:}
        -:  323:
    73034:  324:int numHandCards(struct gameState *state) {
    73034:  325:  return state->handCount[ whoseTurn(state) ];
        -:  326:}
        -:  327:
   133577:  328:int handCard(int handPos, struct gameState *state) {
   133577:  329:  int currentPlayer = whoseTurn(state);
   133577:  330:  return state->hand[currentPlayer][handPos];
        -:  331:}
        -:  332:
     8886:  333:int supplyCount(int card, struct gameState *state) {
     8886:  334:  return state->supplyCount[card];
        -:  335:}
        -:  336:
    #####:  337:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  338:  int i;
    #####:  339:  int count = 0;
        -:  340:
    #####:  341:  for (i = 0; i < state->deckCount[player]; i++)
        -:  342:    {
    #####:  343:      if (state->deck[player][i] == card) count++;
        -:  344:    }
        -:  345:
    #####:  346:  for (i = 0; i < state->handCount[player]; i++)
        -:  347:    {
    #####:  348:      if (state->hand[player][i] == card) count++;
        -:  349:    }
        -:  350:
    #####:  351:  for (i = 0; i < state->discardCount[player]; i++)
        -:  352:    {
    #####:  353:      if (state->discard[player][i] == card) count++;
        -:  354:    }
        -:  355:
    #####:  356:  return count;
        -:  357:}
        -:  358:
   216364:  359:int whoseTurn(struct gameState *state) {
   216364:  360:  return state->whoseTurn;
        -:  361:}
        -:  362:
     7341:  363:int endTurn(struct gameState *state) {
        -:  364:  int k;
        -:  365:  int i;
     7341:  366:  int currentPlayer = whoseTurn(state);
        -:  367:  
        -:  368:  //Discard hand
    42476:  369:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    35135:  370:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    35135:  371:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  372:  }
     7341:  373:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  374:    
        -:  375:  //Code for determining the player
     7341:  376:  if (currentPlayer < (state->numPlayers - 1)){ 
     3119:  377:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  378:  }
        -:  379:  else{
     4222:  380:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  381:  }
        -:  382:
     7341:  383:  state->outpostPlayed = 0;
     7341:  384:  state->phase = 0;
     7341:  385:  state->numActions = 1;
     7341:  386:  state->coins = 0;
     7341:  387:  state->numBuys = 1;
     7341:  388:  state->playedCardCount = 0;
     7341:  389:  state->handCount[state->whoseTurn] = 0;
        -:  390:
        -:  391:  //int k; move to top
        -:  392:  //Next player draws hand
    44046:  393:  for (k = 0; k < 5; k++){
    36705:  394:    drawCard(state->whoseTurn, state);//Draw a card
        -:  395:  }
        -:  396:
        -:  397:  //Update money
     7341:  398:  updateCoins(state->whoseTurn, state , 0);
        -:  399:
     7341:  400:  return 0;
        -:  401:}
        -:  402:
     2774:  403:int isGameOver(struct gameState *state) {
        -:  404:  int i;
        -:  405:  int j;
        -:  406:	
        -:  407:  //if stack of Province cards is empty, the game ends
     2774:  408:  if (state->supplyCount[province] == 0)
        -:  409:    {
    #####:  410:      return 1;
        -:  411:    }
        -:  412:
        -:  413:  //if three supply pile are at 0, the game ends
     2774:  414:  j = 0;
    72124:  415:  for (i = 0; i < 25; i++)
        -:  416:    {
    69350:  417:      if (state->supplyCount[i] == 0)
        -:  418:	{
     3563:  419:	  j++;
        -:  420:	}
        -:  421:    }
     2774:  422:  if ( j >= 3)
        -:  423:    {
       18:  424:      return 1;
        -:  425:    }
        -:  426:
     2756:  427:  return 0;
        -:  428:}
        -:  429:
    #####:  430:int scoreFor (int player, struct gameState *state) {
        -:  431:
        -:  432:  int i;
    #####:  433:  int score = 0;
        -:  434:  //score from hand
    #####:  435:  for (i = 0; i < state->handCount[player]; i++)
        -:  436:    {
    #####:  437:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  438:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  439:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  440:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  441:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  442:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  443:    }
        -:  444:
        -:  445:  //score from discard
    #####:  446:  for (i = 0; i < state->discardCount[player]; i++)
        -:  447:    {
    #####:  448:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  449:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  450:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  451:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  452:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  453:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  454:    }
        -:  455:
        -:  456:  //score from deck
    #####:  457:  for (i = 0; i < state->discardCount[player]; i++)
        -:  458:    {
    #####:  459:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  460:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  461:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  462:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  463:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  464:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  465:    }
        -:  466:
    #####:  467:  return score;
        -:  468:}
        -:  469:
    #####:  470:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  471:  int i;	
        -:  472:  int j;
        -:  473:  int highScore;
        -:  474:  int currentPlayer;
        -:  475:
        -:  476:  //get score for each player
    #####:  477:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  478:    {
        -:  479:      //set unused player scores to -9999
    #####:  480:      if (i >= state->numPlayers)
        -:  481:	{
    #####:  482:	  players[i] = -9999;
        -:  483:	}
        -:  484:      else
        -:  485:	{
    #####:  486:	  players[i] = scoreFor (i, state);
        -:  487:	}
        -:  488:    }
        -:  489:
        -:  490:  //find highest score
    #####:  491:  j = 0;
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  493:    {
    #####:  494:      if (players[i] > players[j])
        -:  495:	{
    #####:  496:	  j = i;
        -:  497:	}
        -:  498:    }
    #####:  499:  highScore = players[j];
        -:  500:
        -:  501:  //add 1 to players who had less turns
    #####:  502:  currentPlayer = whoseTurn(state);
    #####:  503:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  504:    {
    #####:  505:      if ( players[i] == highScore && i > currentPlayer )
        -:  506:	{
    #####:  507:	  players[i]++;
        -:  508:	}
        -:  509:    }
        -:  510:
        -:  511:  //find new highest score
    #####:  512:  j = 0;
    #####:  513:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  514:    {
    #####:  515:      if ( players[i] > players[j] )
        -:  516:	{
    #####:  517:	  j = i;
        -:  518:	}
        -:  519:    }
    #####:  520:  highScore = players[j];
        -:  521:
        -:  522:  //set winners in array to 1 and rest to 0
    #####:  523:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  524:    {
    #####:  525:      if ( players[i] == highScore )
        -:  526:	{
    #####:  527:	  players[i] = 1;
        -:  528:	}
        -:  529:      else
        -:  530:	{
    #####:  531:	  players[i] = 0;
        -:  532:	}
        -:  533:    }
        -:  534:
    #####:  535:  return 0;
        -:  536:}
        -:  537:
    37097:  538:int drawCard(int player, struct gameState *state)
        -:  539:{	int count;
        -:  540:  int deckCounter;
    37097:  541:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  542:    
        -:  543:    //Step 1 Shuffle the discard pile back into a deck
        -:  544:    int i;
        -:  545:    //Move discard to deck
    40474:  546:    for (i = 0; i < state->discardCount[player];i++){
    35581:  547:      state->deck[player][i] = state->discard[player][i];
    35581:  548:      state->discard[player][i] = -1;
        -:  549:    }
        -:  550:
     4893:  551:    state->deckCount[player] = state->discardCount[player];
     4893:  552:    state->discardCount[player] = 0;//Reset discard
        -:  553:
        -:  554:    //Shufffle the deck
     4893:  555:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  556:   
        -:  557:    if (DEBUG){//Debug statements
     4893:  558:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  559:    }
        -:  560:    
     4893:  561:    state->discardCount[player] = 0;
        -:  562:
        -:  563:    //Step 2 Draw Card
     4893:  564:    count = state->handCount[player];//Get current player's hand count
        -:  565:    
        -:  566:    if (DEBUG){//Debug statements
     4893:  567:      printf("Current hand count: %d\n", count);
        -:  568:    }
        -:  569:    
     4893:  570:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  571:
     4893:  572:    if (deckCounter == 0)
     1393:  573:      return -1;
        -:  574:
     3500:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
     3500:  576:    state->deckCount[player]--;
     3500:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
        -:  580:  else{
    32204:  581:    int count = state->handCount[player];//Get current hand count for player
        -:  582:    int deckCounter;
        -:  583:    if (DEBUG){//Debug statements
    32204:  584:      printf("Current hand count: %d\n", count);
        -:  585:    }
        -:  586:
    32204:  587:    deckCounter = state->deckCount[player];//Create holder for the deck count
    32204:  588:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    32204:  589:    state->deckCount[player]--;
    32204:  590:    state->handCount[player]++;//Increment hand count
        -:  591:  }
        -:  592:
    35704:  593:  return 0;
        -:  594:}
        -:  595:
     8515:  596:int getCost(int cardNumber)
        -:  597:{
     8515:  598:  switch( cardNumber ) 
        -:  599:    {
        -:  600:    case curse:
       13:  601:      return 0;
        -:  602:    case estate:
      127:  603:      return 2;
        -:  604:    case duchy:
        9:  605:      return 5;
        -:  606:    case province:
       90:  607:      return 8;
        -:  608:    case copper:
        1:  609:      return 0;
        -:  610:    case silver:
    #####:  611:      return 3;
        -:  612:    case gold:
    #####:  613:      return 6;
        -:  614:    case adventurer:
      428:  615:      return 6;
        -:  616:    case council_room:
      296:  617:      return 5;
        -:  618:    case feast:
      345:  619:      return 4;
        -:  620:    case gardens:
      679:  621:      return 4;
        -:  622:    case mine:
      464:  623:      return 5;
        -:  624:    case remodel:
      286:  625:      return 4;
        -:  626:    case smithy:
      665:  627:      return 4;
        -:  628:    case village:
      354:  629:      return 3;
        -:  630:    case baron:
      675:  631:      return 4;
        -:  632:    case great_hall:
      334:  633:      return 3;
        -:  634:    case minion:
      234:  635:      return 5;
        -:  636:    case steward:
      171:  637:      return 3;
        -:  638:    case tribute:
      350:  639:      return 5;
        -:  640:    case ambassador:
      626:  641:      return 3;
        -:  642:    case cutpurse:
      465:  643:      return 4;
        -:  644:    case embargo: 
      295:  645:      return 2;
        -:  646:    case outpost:
      242:  647:      return 5;
        -:  648:    case salvager:
      284:  649:      return 4;
        -:  650:    case sea_hag:
      325:  651:      return 4;
        -:  652:    case treasure_map:
      616:  653:      return 4;
        -:  654:    }
        -:  655:	
      141:  656:  return -1;
        -:  657:}
        -:  658:
     2412:  659:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  660:{
        -:  661:  int i;
        -:  662:  int j;
        -:  663:  int k;
        -:  664:  int x;
        -:  665:  int index;
     2412:  666:  int currentPlayer = whoseTurn(state);
     2412:  667:  int nextPlayer = currentPlayer + 1;
        -:  668:
     2412:  669:  int tributeRevealedCards[2] = {-1, -1};
        -:  670:  int temphand[MAX_HAND];// moved above the if statement
     2412:  671:  int drawntreasure=0;
        -:  672:  int cardDrawn;
     2412:  673:  int z = 0;// this is the counter for the temp hand
     2412:  674:  if (nextPlayer > (state->numPlayers - 1)){
     1375:  675:    nextPlayer = 0;
        -:  676:  }
        -:  677:  
        -:  678:	
        -:  679:  //uses switch to select card and perform actions
     2412:  680:  switch( card ) 
        -:  681:    {
        -:  682:    case adventurer:
    #####:  683:      while(drawntreasure<2){
    #####:  684:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  685:	  shuffle(currentPlayer, state);
        -:  686:	}
    #####:  687:	drawCard(currentPlayer, state);
    #####:  688:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  689:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  690:	  drawntreasure++;
        -:  691:	else{
    #####:  692:	  temphand[z]=cardDrawn;
    #####:  693:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  694:	  z++;
        -:  695:	}
        -:  696:      }
    #####:  697:      while(z-1>=0){
    #####:  698:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  699:	z=z-1;
        -:  700:      }
    #####:  701:      return 0;
        -:  702:			
        -:  703:    case council_room:
        -:  704:      //+4 Cards
       35:  705:      for (i = 0; i < 4; i++)
        -:  706:	{
       28:  707:	  drawCard(currentPlayer, state);
        -:  708:	}
        -:  709:			
        -:  710:      //+1 Buy
        7:  711:      state->numBuys++;
        -:  712:			
        -:  713:      //Each other player draws a card
       34:  714:      for (i = 0; i < state->numPlayers; i++)
        -:  715:	{
       27:  716:	  if ( i != currentPlayer )
        -:  717:	    {
       20:  718:	      drawCard(i, state);
        -:  719:	    }
        -:  720:	}
        -:  721:			
        -:  722:      //put played card in played card pile
        7:  723:      discardCard(handPos, currentPlayer, state, 0);
        -:  724:			
        7:  725:      return 0;
        -:  726:			
        -:  727:    case feast:
        -:  728:      //gain card with cost up to 5
        -:  729:      //Backup hand
      994:  730:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
      852:  731:	temphand[i] = state->hand[currentPlayer][i];//Backup card
      852:  732:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  733:      }
        -:  734:      //Backup hand
        -:  735:
        -:  736:      //Update Coins for Buy
      142:  737:      updateCoins(currentPlayer, state, 5);
      142:  738:      x = 1;//Condition to loop on
      426:  739:      while( x == 1) {//Buy one card
      142:  740:	if (supplyCount(choice1, state) <= 0){
        -:  741:	  if (DEBUG)
      131:  742:	    printf("None of that card left, sorry!\n");
        -:  743:
        -:  744:	  if (DEBUG){
      131:  745:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  746:	  }
      131:  747:	  x = 0;
        -:  748:	}
       11:  749:	else if (state->coins < getCost(choice1)){
    #####:  750:	  printf("That card is too expensive!\n");
        -:  751:
        -:  752:	  if (DEBUG){
    #####:  753:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  754:	  }
        -:  755:	}
        -:  756:	else{
        -:  757:
        -:  758:	  if (DEBUG){
       11:  759:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  760:	  }
        -:  761:
       11:  762:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
       11:  763:	  x = 0;//No more buying cards
        -:  764:
        -:  765:	  if (DEBUG){
       11:  766:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  767:	  }
        -:  768:
        -:  769:	}
        -:  770:      }     
        -:  771:
        -:  772:      //Reset Hand
      994:  773:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
      852:  774:	state->hand[currentPlayer][i] = temphand[i];
      852:  775:	temphand[i] = -1;
        -:  776:      }
        -:  777:      //Reset Hand
        -:  778:      			
      142:  779:      return 0;
        -:  780:			
        -:  781:    case gardens:
      359:  782:      return -1;
        -:  783:			
        -:  784:    case mine:
       44:  785:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  786:
       44:  787:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  788:	{
       44:  789:	  return -1;
        -:  790:	}
        -:  791:		
    #####:  792:      if (choice2 > treasure_map || choice2 < curse)
        -:  793:	{
    #####:  794:	  return -1;
        -:  795:	}
        -:  796:
    #####:  797:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  798:	{
    #####:  799:	  return -1;
        -:  800:	}
        -:  801:
    #####:  802:      gainCard(choice2, state, 2, currentPlayer);
        -:  803:
        -:  804:      //discard card from hand
    #####:  805:      discardCard(handPos, currentPlayer, state, 0);
        -:  806:
        -:  807:      //discard trashed card
    #####:  808:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  809:	{
    #####:  810:	  if (state->hand[currentPlayer][i] == j)
        -:  811:	    {
    #####:  812:	      discardCard(i, currentPlayer, state, 0);			
    #####:  813:	      break;
        -:  814:	    }
        -:  815:	}
        -:  816:			
    #####:  817:      return 0;
        -:  818:			
        -:  819:    case remodel:
      130:  820:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  821:
      130:  822:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  823:	{
      130:  824:	  return -1;
        -:  825:	}
        -:  826:
    #####:  827:      gainCard(choice2, state, 0, currentPlayer);
        -:  828:      //discard card from hand
    #####:  829:      discardCard(handPos, currentPlayer, state, 0);
        -:  830:
        -:  831:      //discard trashed card
    #####:  832:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  833:	{
    #####:  834:	  if (state->hand[currentPlayer][i] == j)
        -:  835:	    {
    #####:  836:	      discardCard(i, currentPlayer, state, 0);			
    #####:  837:	      break;
        -:  838:	    }
        -:  839:	}
        -:  840:
        -:  841:
    #####:  842:      return 0;
        -:  843:		
        -:  844:    case smithy:
        -:  845:      //+3 Cards
      152:  846:      for (i = 0; i < 3; i++)
        -:  847:	{
      114:  848:	  drawCard(currentPlayer, state);
        -:  849:	}
        -:  850:			
        -:  851:      //discard card from hand
       38:  852:      discardCard(handPos, currentPlayer, state, 0);
       38:  853:      return 0;
        -:  854:		
        -:  855:    case village:
        -:  856:      //+1 Card
       69:  857:      drawCard(currentPlayer, state);
        -:  858:			
        -:  859:      //+2 Actions
       69:  860:      state->numActions = state->numActions + 2;
        -:  861:			
        -:  862:      //discard played card from hand
       69:  863:      discardCard(handPos, currentPlayer, state, 0);
       69:  864:      return 0;
        -:  865:		
        -:  866:    case baron:
      413:  867:      state->numBuys++;//Increase buys by 1!
      413:  868:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  869:	int p = 0;//Iterator for hand!
    #####:  870:	int card_not_discarded = 1;//Flag for discard set!
    #####:  871:	while(card_not_discarded){
    #####:  872:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  873:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  874:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  875:	    state->discardCount[currentPlayer]++;
    #####:  876:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  877:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  878:	    }
    #####:  879:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  880:	    state->handCount[currentPlayer]--;
    #####:  881:	    card_not_discarded = 0;//Exit the loop
        -:  882:	  }
    #####:  883:	  else if (p > state->handCount[currentPlayer]){
        -:  884:	    if(DEBUG) {
    #####:  885:	      printf("No estate cards in your hand, invalid choice\n");
    #####:  886:	      printf("Must gain an estate if there are any\n");
        -:  887:	    }
    #####:  888:	    if (supplyCount(estate, state) > 0){
    #####:  889:	      gainCard(estate, state, 0, currentPlayer);
    #####:  890:	      state->supplyCount[estate]--;//Decrement estates
    #####:  891:	      if (supplyCount(estate, state) == 0){
    #####:  892:		isGameOver(state);
        -:  893:	      }
        -:  894:	    }
    #####:  895:	    card_not_discarded = 0;//Exit the loop
        -:  896:	  }
        -:  897:			    
        -:  898:	  else{
    #####:  899:	    p++;//Next card
        -:  900:	  }
        -:  901:	}
        -:  902:      }
        -:  903:			    
        -:  904:      else{
      413:  905:	if (supplyCount(estate, state) > 0){
       40:  906:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
       40:  907:	  state->supplyCount[estate]--;//Decrement Estates
       40:  908:	  if (supplyCount(estate, state) == 0){
        8:  909:	    isGameOver(state);
        -:  910:	  }
        -:  911:	}
        -:  912:      }
        -:  913:	    
        -:  914:      
      413:  915:      return 0;
        -:  916:		
        -:  917:    case great_hall:
        -:  918:      //+1 Card
       62:  919:      drawCard(currentPlayer, state);
        -:  920:			
        -:  921:      //+1 Actions
       62:  922:      state->numActions++;
        -:  923:			
        -:  924:      //discard card from hand
       62:  925:      discardCard(handPos, currentPlayer, state, 0);
       62:  926:      return 0;
        -:  927:		
        -:  928:    case minion:
        -:  929:      //+1 action
        6:  930:      state->numActions++;
        -:  931:			
        -:  932:      //discard card from hand
        6:  933:      discardCard(handPos, currentPlayer, state, 0);
        -:  934:			
        6:  935:      if (choice1)		//+2 coins
        -:  936:	{
        6:  937:	  state->coins = state->coins + 2;
        -:  938:	}
        -:  939:			
    #####:  940:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  941:	{
        -:  942:	  //discard hand
    #####:  943:	  while(numHandCards(state) > 0)
        -:  944:	    {
    #####:  945:	      discardCard(handPos, currentPlayer, state, 0);
        -:  946:	    }
        -:  947:				
        -:  948:	  //draw 4
    #####:  949:	  for (i = 0; i < 4; i++)
        -:  950:	    {
    #####:  951:	      drawCard(currentPlayer, state);
        -:  952:	    }
        -:  953:				
        -:  954:	  //other players discard hand and redraw if hand size > 4
    #####:  955:	  for (i = 0; i < state->numPlayers; i++)
        -:  956:	    {
    #####:  957:	      if (i != currentPlayer)
        -:  958:		{
    #####:  959:		  if ( state->handCount[i] > 4 )
        -:  960:		    {
        -:  961:		      //discard hand
    #####:  962:		      while( state->handCount[i] > 0 )
        -:  963:			{
    #####:  964:			  discardCard(handPos, i, state, 0);
        -:  965:			}
        -:  966:							
        -:  967:		      //draw 4
    #####:  968:		      for (j = 0; j < 4; j++)
        -:  969:			{
    #####:  970:			  drawCard(i, state);
        -:  971:			}
        -:  972:		    }
        -:  973:		}
        -:  974:	    }
        -:  975:				
        -:  976:	}
        6:  977:      return 0;
        -:  978:		
        -:  979:    case steward:
       30:  980:      if (choice1 == 1)
        -:  981:	{
        -:  982:	  //+2 cards
    #####:  983:	  drawCard(currentPlayer, state);
    #####:  984:	  drawCard(currentPlayer, state);
        -:  985:	}
       30:  986:      else if (choice1 == 2)
        -:  987:	{
        -:  988:	  //+2 coins
    #####:  989:	  state->coins = state->coins + 2;
        -:  990:	}
        -:  991:      else
        -:  992:	{
        -:  993:	  //trash 2 cards in hand
       30:  994:	  discardCard(choice2, currentPlayer, state, 1);
       30:  995:	  discardCard(choice3, currentPlayer, state, 1);
        -:  996:	}
        -:  997:			
        -:  998:      //discard card from hand
       30:  999:      discardCard(handPos, currentPlayer, state, 0);
       30: 1000:      return 0;
        -: 1001:		
        -: 1002:    case tribute:
       27: 1003:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
       13: 1004:	if (state->deckCount[nextPlayer] > 0){
    #####: 1005:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1006:	  state->deckCount[nextPlayer]--;
        -: 1007:	}
       13: 1008:	else if (state->discardCount[nextPlayer] > 0){
        1: 1009:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
        1: 1010:	  state->discardCount[nextPlayer]--;
        -: 1011:	}
        -: 1012:	else{
        -: 1013:	  //No Card to Reveal
        -: 1014:	  if (DEBUG){
       12: 1015:	    printf("No cards to reveal\n");
        -: 1016:	  }
        -: 1017:	}
        -: 1018:      }
        -: 1019:	    
        -: 1020:      else{
       14: 1021:	if (state->deckCount[nextPlayer] == 0){
        6: 1022:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
        4: 1023:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
        4: 1024:	    state->deckCount[nextPlayer]++;
        4: 1025:	    state->discard[nextPlayer][i] = -1;
        4: 1026:	    state->discardCount[nextPlayer]--;
        -: 1027:	  }
        -: 1028:			    
        2: 1029:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1030:	} 
       14: 1031:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
       14: 1032:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
       14: 1033:	state->deckCount[nextPlayer]--;
       14: 1034:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
       14: 1035:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
       14: 1036:	state->deckCount[nextPlayer]--;
        -: 1037:      }    
        -: 1038:		       
       27: 1039:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
       18: 1040:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
       18: 1041:	state->playedCardCount++;
       18: 1042:	tributeRevealedCards[1] = -1;
        -: 1043:      }
        -: 1044:
      108: 1045:      for (i = 0; i <= 2; i ++){
       86: 1046:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
        5: 1047:	  state->coins += 2;
        -: 1048:	}
        -: 1049:		    
       83: 1050:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
        7: 1051:	  drawCard(currentPlayer, state);
        7: 1052:	  drawCard(currentPlayer, state);
        -: 1053:	}
        -: 1054:	else{//Action Card
       69: 1055:	  state->numActions = state->numActions + 2;
        -: 1056:	}
        -: 1057:      }
        -: 1058:	    
       27: 1059:      return 0;
        -: 1060:		
        -: 1061:    case ambassador:
      690: 1062:      j = 0;		//used to check if player has enough cards to discard
        -: 1063:
      690: 1064:      if (choice2 > 2 || choice2 < 0)
        -: 1065:	{
      690: 1066:	  return -1;				
        -: 1067:	}
        -: 1068:
    #####: 1069:      if (choice1 == handPos)
        -: 1070:	{
    #####: 1071:	  return -1;
        -: 1072:	}
        -: 1073:
    #####: 1074:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1075:	{
    #####: 1076:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1077:	    {
    #####: 1078:	      j++;
        -: 1079:	    }
        -: 1080:	}
    #####: 1081:      if (j < choice2)
        -: 1082:	{
    #####: 1083:	  return -1;				
        -: 1084:	}
        -: 1085:
        -: 1086:      if (DEBUG) 
    #####: 1087:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1088:
        -: 1089:      //increase supply count for choosen card by amount being discarded
    #####: 1090:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1091:			
        -: 1092:      //each other player gains a copy of revealed card
    #####: 1093:      for (i = 0; i < state->numPlayers; i++)
        -: 1094:	{
    #####: 1095:	  if (i != currentPlayer)
        -: 1096:	    {
    #####: 1097:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1098:	    }
        -: 1099:	}
        -: 1100:
        -: 1101:      //discard played card from hand
    #####: 1102:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1103:
        -: 1104:      //trash copies of cards returned to supply
    #####: 1105:      for (j = 0; j < choice2; j++)
        -: 1106:	{
    #####: 1107:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1108:	    {
    #####: 1109:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1110:		{
    #####: 1111:		  discardCard(i, currentPlayer, state, 1);
    #####: 1112:		  break;
        -: 1113:		}
        -: 1114:	    }
        -: 1115:	}			
        -: 1116:
    #####: 1117:      return 0;
        -: 1118:		
        -: 1119:    case cutpurse:
        -: 1120:
       35: 1121:      updateCoins(currentPlayer, state, 2);
      146: 1122:      for (i = 0; i < state->numPlayers; i++)
        -: 1123:	{
      111: 1124:	  if (i != currentPlayer)
        -: 1125:	    {
       79: 1126:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1127:		{
    #####: 1128:		  if (state->hand[i][j] == copper)
        -: 1129:		    {
    #####: 1130:		      discardCard(j, i, state, 0);
    #####: 1131:		      break;
        -: 1132:		    }
    #####: 1133:		  if (j == state->handCount[i])
        -: 1134:		    {
    #####: 1135:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1136:			{
        -: 1137:			  if (DEBUG)
    #####: 1138:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1139:			}	
    #####: 1140:		      break;
        -: 1141:		    }		
        -: 1142:		}
        -: 1143:					
        -: 1144:	    }
        -: 1145:				
        -: 1146:	}				
        -: 1147:
        -: 1148:      //discard played card from hand
       35: 1149:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1150:
       35: 1151:      return 0;
        -: 1152:
        -: 1153:		
        -: 1154:    case embargo: 
        -: 1155:      //+2 Coins
       81: 1156:      state->coins = state->coins + 2;
        -: 1157:			
        -: 1158:      //see if selected pile is in play
       81: 1159:      if ( state->supplyCount[choice1] == -1 )
        -: 1160:	{
    #####: 1161:	  return -1;
        -: 1162:	}
        -: 1163:			
        -: 1164:      //add embargo token to selected supply pile
       81: 1165:      state->embargoTokens[choice1]++;
        -: 1166:			
        -: 1167:      //trash card
       81: 1168:      discardCard(handPos, currentPlayer, state, 1);		
       81: 1169:      return 0;
        -: 1170:		
        -: 1171:    case outpost:
        -: 1172:      //set outpost flag
        5: 1173:      state->outpostPlayed++;
        -: 1174:			
        -: 1175:      //discard card
        5: 1176:      discardCard(handPos, currentPlayer, state, 0);
        5: 1177:      return 0;
        -: 1178:		
        -: 1179:    case salvager:
        -: 1180:      //+1 buy
       23: 1181:      state->numBuys++;
        -: 1182:			
       23: 1183:      if (choice1)
        -: 1184:	{
        -: 1185:	  //gain coins equal to trashed card
       23: 1186:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1187:	  //trash card
       23: 1188:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1189:	}
        -: 1190:			
        -: 1191:      //discard card
       23: 1192:      discardCard(handPos, currentPlayer, state, 0);
       23: 1193:      return 0;
        -: 1194:		
        -: 1195:    case sea_hag:
      210: 1196:      for (i = 0; i < state->numPlayers; i++){
      105: 1197:	if (i != currentPlayer){
       70: 1198:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
       70: 1199:	  state->discardCount[i]++;
       70: 1200:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1201:	}
        -: 1202:      }
      105: 1203:      return 0;
        -: 1204:		
        -: 1205:    case treasure_map:
        -: 1206:      //search hand for another treasure_map
      146: 1207:      index = -1;
      829: 1208:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1209:	{
      696: 1210:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1211:	    {
       13: 1212:	      index = i;
       13: 1213:	      break;
        -: 1214:	    }
        -: 1215:	}
      146: 1216:      if (index > -1)
        -: 1217:	{
        -: 1218:	  //trash both treasure cards
       13: 1219:	  discardCard(handPos, currentPlayer, state, 1);
       13: 1220:	  discardCard(index, currentPlayer, state, 1);
        -: 1221:
        -: 1222:	  //gain 4 Gold cards
       65: 1223:	  for (i = 0; i < 4; i++)
        -: 1224:	    {
       52: 1225:	      gainCard(gold, state, 1, currentPlayer);
        -: 1226:	    }
        -: 1227:				
        -: 1228:	  //return success
       13: 1229:	  return 1;
        -: 1230:	}
        -: 1231:			
        -: 1232:      //no second treasure_map found in hand
      133: 1233:      return -1;
        -: 1234:    }
        -: 1235:	
    #####: 1236:  return -1;
        -: 1237:}
        -: 1238:
      465: 1239:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1240:{
        -: 1241:	
        -: 1242:  //if card is not trashed, added to Played pile 
      465: 1243:  if (trashFlag < 1)
        -: 1244:    {
        -: 1245:      //add card to played pile
      275: 1246:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      275: 1247:      state->playedCardCount++;
        -: 1248:    }
        -: 1249:	
        -: 1250:  //set played card to -1
      465: 1251:  state->hand[currentPlayer][handPos] = -1;
        -: 1252:	
        -: 1253:  //remove card from player's hand
      465: 1254:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1255:    {
        -: 1256:      //reduce number of cards in hand
       34: 1257:      state->handCount[currentPlayer]--;
        -: 1258:    }
      431: 1259:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1260:    {
        -: 1261:      //reduce number of cards in hand
    #####: 1262:      state->handCount[currentPlayer]--;
        -: 1263:    }
        -: 1264:  else 	
        -: 1265:    {
        -: 1266:      //replace discarded card with last card in hand
      431: 1267:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1268:      //set last card to -1
      431: 1269:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1270:      //reduce number of cards in hand
      431: 1271:      state->handCount[currentPlayer]--;
        -: 1272:    }
        -: 1273:	
      465: 1274:  return 0;
        -: 1275:}
        -: 1276:
      930: 1277:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1278:{
        -: 1279:  //Note: supplyPos is enum of choosen card
        -: 1280:	
        -: 1281:  //check if supply pile is empty (0) or card is not used in game (-1)
      930: 1282:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1283:    {
    #####: 1284:      return -1;
        -: 1285:    }
        -: 1286:	
        -: 1287:  //added card for [whoseTurn] current player:
        -: 1288:  // toFlag = 0 : add to discard
        -: 1289:  // toFlag = 1 : add to deck
        -: 1290:  // toFlag = 2 : add to hand
        -: 1291:
      930: 1292:  if (toFlag == 1)
        -: 1293:    {
       52: 1294:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
       52: 1295:      state->deckCount[player]++;
        -: 1296:    }
      878: 1297:  else if (toFlag == 2)
        -: 1298:    {
    #####: 1299:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1300:      state->handCount[player]++;
        -: 1301:    }
        -: 1302:  else
        -: 1303:    {
      878: 1304:      state->discard[player][ state->discardCount[player] ] = supplyPos;
      878: 1305:      state->discardCount[player]++;
        -: 1306:    }
        -: 1307:	
        -: 1308:  //decrease number in supply pile
      930: 1309:  state->supplyCount[supplyPos]--;
        -: 1310:	 
      930: 1311:  return 0;
        -: 1312:}
        -: 1313:
     8591: 1314:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1315:{
        -: 1316:  int i;
        -: 1317:	
        -: 1318:  //reset coin count
     8591: 1319:  state->coins = 0;
        -: 1320:
        -: 1321:  //add coins for each Treasure card in player's hand
    49975: 1322:  for (i = 0; i < state->handCount[player]; i++)
        -: 1323:    {
    41384: 1324:      if (state->hand[player][i] == copper)
        -: 1325:	{
    15586: 1326:	  state->coins += 1;
        -: 1327:	}
    25798: 1328:      else if (state->hand[player][i] == silver)
        -: 1329:	{
    #####: 1330:	  state->coins += 2;
        -: 1331:	}
    25798: 1332:      else if (state->hand[player][i] == gold)
        -: 1333:	{
      372: 1334:	  state->coins += 3;
        -: 1335:	}	
        -: 1336:    }	
        -: 1337:
        -: 1338:  //add bonus
     8591: 1339:  state->coins += bonus;
        -: 1340:  
     8591: 1341:  return 0;
        -: 1342:}
        -: 1343:
        -: 1344:
        -: 1345://end of dominion.c
        -: 1346:
