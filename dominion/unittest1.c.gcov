        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdlib.h>
        -:    5:#include <stdio.h>
        -:    6:#include <time.h>
        -:    7:#include <assert.h>
        -:    8:#include "rngs.h"
        -:    9:#include "my_assert.h"
        -:   10:
        -:   11:int main(int argc, char* argv[]){
        -:   12:
        -:   13:    /*
        -:   14:     *create random numbers for arguments for buyCard (including randomly assigning values to gameState Struct fields: whoseTurn, numBuys, coins, and set phase to 0)
        -:   15:     *put a random number on the command line
        -:   16:     *call buyCard
        -:   17:     *check if it returned 0
        -:   18:     */ 
        -:   19:
        1:   20:    srand(time(NULL));
        -:   21:
        -:   22:    int ret;
        1:   23:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   24:    int supplyPos = rand()%6;
        1:   25:    int seed = rand()%100;
        1:   26:    struct gameState *state = malloc(sizeof(struct gameState));
        1:   27:    initializeGame(2, k, seed, state);
        -:   28:    
        1:   29:    state->whoseTurn = 0;
        1:   30:    state->numBuys = 1;
        1:   31:    state->coins = 8;
        1:   32:    state->phase = 0;
        -:   33:
        1:   34:    ret = buyCard(supplyPos, state);
        -:   35:
        2:   36:    assert(ret == 0);
        -:   37:
        1:   38:    fprintf(stdout, "Test passed\n");
        -:   39:
        1:   40:    return 0;
        -:   41:
        -:   42:}
