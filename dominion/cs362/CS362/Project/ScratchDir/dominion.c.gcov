        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
        -:    9:  if (*(int*)a > *(int*)b)
        -:   10:    return 1;
        -:   11:  if (*(int*)a < *(int*)b)
        -:   12:    return -1;
        -:   13:  return 0;
        -:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
        -:   17:  struct gameState* g = malloc(sizeof(struct gameState));
        -:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
        -:   23:  int* k = malloc(10 * sizeof(int));
        -:   24:  k[0] = k1;
        -:   25:  k[1] = k2;
        -:   26:  k[2] = k3;
        -:   27:  k[3] = k4;
        -:   28:  k[4] = k5;
        -:   29:  k[5] = k6;
        -:   30:  k[6] = k7;
        -:   31:  k[7] = k8;
        -:   32:  k[8] = k9;
        -:   33:  k[9] = k10;
        -:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        -:   44:  SelectStream(1);
        -:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        -:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
        -:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        -:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
        -:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
        -:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
        -:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
        -:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        -:   73:  if (numPlayers == 2)
        -:   74:    {
        -:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        -:   77:  else if (numPlayers == 3)
        -:   78:    {
        -:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        -:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        -:   87:  if (numPlayers == 2)
        -:   88:    {
        -:   89:      state->supplyCount[estate] = 8;
        -:   90:      state->supplyCount[duchy] = 8;
        -:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        -:   95:      state->supplyCount[estate] = 12;
        -:   96:      state->supplyCount[duchy] = 12;
        -:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        -:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        -:  102:  state->supplyCount[silver] = 40;
        -:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
        -:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
        -:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
        -:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
        -:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
        -:  115:		  if (numPlayers == 2){ 
        -:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
        -:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
        -:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
        -:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
        -:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        -:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
        -:  140:      state->deckCount[i] = 0;
        -:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
        -:  143:	  state->deck[i][j] = estate;
        -:  144:	  state->deckCount[i]++;
        -:  145:	}
        -:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
        -:  148:	  state->deck[i][j] = copper;
        -:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        -:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
        -:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
        -:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
        -:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        -:  166:      state->handCount[i] = 0;
        -:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
        -:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
        -:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        -:  182:  state->outpostPlayed = 0;
        -:  183:  state->phase = 0;
        -:  184:  state->numActions = 1;
        -:  185:  state->numBuys = 1;
        -:  186:  state->playedCardCount = 0;
        -:  187:  state->whoseTurn = 0;
        -:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
        -:  192:  for (it = 0; it < 5; it++){
        -:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        -:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        -:  198:  return 0;
        -:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        -:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:printf("In shuffle \n");
        -:  209:  if (state->deckCount[player] < 1)
        -:  210:    return -1;
        -:  211://  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:printf("after qsort \n");
        -:  214:  while (state->deckCount[player] > 0) {
        -:  215:    card = floor(Random() * state->deckCount[player]);
        -:  216:    newDeck[newDeckPos] = state->deck[player][card];
        -:  217:    newDeckPos++;
        -:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
        -:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
        -:  221:    state->deckCount[player]--;
        -:  222:  }
        -:  223:  for (i = 0; i < newDeckPos; i++) {
        -:  224:    state->deck[player][i] = newDeck[i];
        -:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:printf("returning from shuffle \n");
        -:  228:  return 0;
        -:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
        -:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
        -:  237:  if (state->phase != 0)
        -:  238:    {
        -:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
        -:  243:  if ( state->numActions < 1 )
        -:  244:    {
        -:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
        -:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
        -:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
        -:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
        -:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
        -:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
        -:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        -:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
        -:  269:  return 0;
        -:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
        -:  280:  who = state->whoseTurn;
        -:  281:
        -:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
        -:  285:    return -1;
        -:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
        -:  289:    return -1;
        -:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        -:  293:    return -1;
        -:  294:  } else {
        -:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
        -:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
        -:  299:    state->coins = (state->coins) - (getCost(supplyPos));
        -:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
        -:  308:  return 0;
        -:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
        -:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
        -:  316:  int currentPlayer = whoseTurn(state);
        -:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
        -:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
        -:  326:  int count = 0;
        -:  327:
        -:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
        -:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
        -:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
        -:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
        -:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
        -:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
        -:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
        -:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
        -:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
        -:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
        -:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
        -:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
        -:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
        -:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
        -:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
        -:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
        -:  370:  state->outpostPlayed = 0;
        -:  371:  state->phase = 0;
        -:  372:  state->numActions = 1;
        -:  373:  state->coins = 0;
        -:  374:  state->numBuys = 1;
        -:  375:  state->playedCardCount = 0;
        -:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
        -:  380:  for (k = 0; k < 5; k++){
        -:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
        -:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
        -:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        -:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        -:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        -:  401:  j = 0;
        -:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
        -:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
        -:  406:	  j++;
        -:  407:	}
        -:  408:    }
        -:  409:  if ( j >= 3)
        -:  410:    {
        -:  411:      return 1;
        -:  412:    }
        -:  413:
        -:  414:  return 0;
        -:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
        -:  420:  int score = 0;
        -:  421:  //score from hand
        -:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
        -:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
        -:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
        -:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
        -:  427:      if (state->hand[player][i] == province) { score = score + 6; };
        -:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
        -:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
        -:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
        -:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
        -:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
        -:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
        -:  438:      if (state->discard[player][i] == province) { score = score + 6; };
        -:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
        -:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
        -:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
        -:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
        -:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
        -:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
        -:  449:      if (state->deck[player][i] == province) { score = score + 6; };
        -:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
        -:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
        -:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
        -:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
        -:  467:      if (i >= state->numPlayers)
        -:  468:	{
        -:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
        -:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
        -:  478:  j = 0;
        -:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
        -:  481:      if (players[i] > players[j])
        -:  482:	{
        -:  483:	  j = i;
        -:  484:	}
        -:  485:    }
        -:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
        -:  489:  currentPlayer = whoseTurn(state);
        -:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
        -:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
        -:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
        -:  499:  j = 0;
        -:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
        -:  502:      if ( players[i] > players[j] )
        -:  503:	{
        -:  504:	  j = i;
        -:  505:	}
        -:  506:    }
        -:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
        -:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
        -:  512:      if ( players[i] == highScore )
        -:  513:	{
        -:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
        -:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
        -:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
        -:  528:	printf("In draw card \n");
        -:  529:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  530:    
        -:  531:    //Step 1 Shuffle the discard pile back into a deck
        -:  532:    int i;
        -:  533:    //Move discard to deck
        -:  534:    for (i = 0; i < state->discardCount[player];i++){
        -:  535:      state->deck[player][i] = state->discard[player][i];
        -:  536:      state->discard[player][i] = -1;
        -:  537:    }
        -:  538:    state->deckCount[player] = state->discardCount[player];
        -:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:printf("Made it \n");
        -:  542:    //Shufffle the deck
        -:  543:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  544:printf("after shuffle \n") ;  
        -:  545: //   if (DEBUG){//Debug statements
        -:  546:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  547:  //  }
        -:  548:    
        -:  549:    state->discardCount[player] = 0;
        -:  550:
        -:  551:    //Step 2 Draw Card
        -:  552:    count = state->handCount[player];//Get current player's hand count
        -:  553:    
        -:  554:   // if (DEBUG){//Debug statements
        -:  555:      printf("Current hand count: %d\n", count);
        -:  556:  //  }
        -:  557:    
        -:  558:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  559:
        -:  560:    if (deckCounter == 0)
        -:  561:      return -1;
        -:  562:
        -:  563:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        -:  564:    state->deckCount[player]--;
        -:  565:    state->handCount[player]++;//Increment hand count
        -:  566:  }
        -:  567:
        -:  568:  else{
        -:  569:    int count = state->handCount[player];//Get current hand count for player
        -:  570:    int deckCounter;
        -:  571:   // if (DEBUG){//Debug statements
        -:  572:      printf("Current hand count: %d\n", count);
        -:  573:   // }
        -:  574:
        -:  575:    deckCounter = state->deckCount[player];//Create holder for the deck count
        -:  576:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        -:  577:    state->deckCount[player]--;
        -:  578:    state->handCount[player]++;//Increment hand count
        -:  579:  }
        -:  580:printf("leaving draw card\n");
        -:  581:  return 0;
        -:  582:}
        -:  583:
        -:  584:int getCost(int cardNumber)
        -:  585:{
        -:  586:  switch( cardNumber ) 
        -:  587:    {
        -:  588:    case curse:
        -:  589:      return 0;
        -:  590:    case estate:
        -:  591:      return 2;
        -:  592:    case duchy:
        -:  593:      return 5;
        -:  594:    case province:
        -:  595:      return 8;
        -:  596:    case copper:
        -:  597:      return 0;
        -:  598:    case silver:
        -:  599:      return 3;
        -:  600:    case gold:
        -:  601:      return 6;
        -:  602:    case adventurer:
        -:  603:      return 6;
        -:  604:    case council_room:
        -:  605:      return 5;
        -:  606:    case feast:
        -:  607:      return 4;
        -:  608:    case gardens:
        -:  609:      return 4;
        -:  610:    case mine:
        -:  611:      return 5;
        -:  612:    case remodel:
        -:  613:      return 4;
        -:  614:    case smithy:
        -:  615:      return 4;
        -:  616:    case village:
        -:  617:      return 3;
        -:  618:    case baron:
        -:  619:      return 4;
        -:  620:    case great_hall:
        -:  621:      return 3;
        -:  622:    case minion:
        -:  623:      return 5;
        -:  624:    case steward:
        -:  625:      return 3;
        -:  626:    case tribute:
        -:  627:      return 5;
        -:  628:    case ambassador:
        -:  629:      return 3;
        -:  630:    case cutpurse:
        -:  631:      return 4;
        -:  632:    case embargo: 
        -:  633:      return 2;
        -:  634:    case outpost:
        -:  635:      return 5;
        -:  636:    case salvager:
        -:  637:      return 4;
        -:  638:    case sea_hag:
        -:  639:      return 4;
        -:  640:    case treasure_map:
        -:  641:      return 4;
        -:  642:    }
        -:  643:	
        -:  644:  return -1;
        -:  645:}
        -:  646:int adventurerCard(struct gameState *state){
        -:  647:	
        -:  648:	int z = 0; //this is the counter for the temp hand
        -:  649:	int cardDrawn;
        -:  650:	int drawntreasure = 0;
        -:  651:	int currentPlayer = whoseTurn(state);
        -:  652:	int temphand[MAX_HAND];
        -:  653:	int y = state->discardCount[currentPlayer];//discard count
        -:  654://printf("in adventurer \n");
        -:  655:	while(drawntreasure < 2){
        -:  656:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  657:	//	printf("empty deck\n");
        -:  658:		  shuffle(currentPlayer, state);
        -:  659:		  y = 0;
        -:  660:		}
        -:  661:		//printf("drawing card \n");
        -:  662:		drawCard(currentPlayer, state); //this call causes things to fail
        -:  663:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  664:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold){
        -:  665:	//	printf("Drew treasure \n");
        -:  666:		  drawntreasure++;
        -:  667:		  state->coins++; //Added to make adventurer easier to test
        -:  668:		}
        -:  669:		else{
        -:  670:	//	printf("didnt draw treasure \n");
        -:  671:		  temphand[z] = cardDrawn;
        -:  672:		  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  673:		  z++;
        -:  674:		}
        -:  675://printf("treasuer count %d coins %d\n", drawntreasure, state->coins);
        -:  676:	}
        -:  677:    while(z-1>=0){
        -:  678:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  679:		z=z-1;
        -:  680:	    y++;
        -:  681:    }
        -:  682://printf("returning %d \n", y);
        -:  683:    return y;
        -:  684:}
        -:  685:int councilRoomCard(struct gameState *state, int handPos){
        -:  686:	int i;
        -:  687:	int currentPlayer = whoseTurn(state);
        -:  688:   //+4 Cards
        -:  689:      for (i = 0; i < 4; i++)
        -:  690:	{
        -:  691:	  drawCard(currentPlayer, state);
        -:  692:	}
        -:  693:			
        -:  694:      //+1 Buy
        -:  695:      state->numBuys++;
        -:  696:			
        -:  697:      //Each other player draws a card
        -:  698:      for (i = 0; i < state->numPlayers; i++)
        -:  699:	{
        -:  700:	  if ( i != currentPlayer )
        -:  701:	    {
        -:  702:	      drawCard(i, state);
        -:  703:	    }
        -:  704:	}
        -:  705:			
        -:  706:      //put played card in played card pile
        -:  707:      discardCard(handPos, currentPlayer, state, 0);
        -:  708:			
        -:  709:      return 0;
        -:  710:}
        -:  711:int smithyCard(struct gameState *state, int handPos){
        -:  712:	int i;
        -:  713:	int currentPlayer = whoseTurn(state);
        -:  714:    //+3 Cards
        -:  715:      for (i = 0; i <= 3; i++)
        -:  716:	{
        -:  717:	  drawCard(currentPlayer, state);
        -:  718:	}
        -:  719:			
        -:  720:      //discard card from hand
        -:  721:      discardCard(handPos, currentPlayer, state, 0);
        -:  722:      return 0;		
        -:  723:}
        -:  724:int remodelCard(struct gameState *state, int handPos, int choice1, int choice2){
        -:  725:	int i;
        -:  726:	int j;
        -:  727:	int currentPlayer = whoseTurn(state);
        -:  728:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  729:
        -:  730:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  731:	{
        -:  732:	  return -1;
        -:  733:	}
        -:  734:
        -:  735:      gainCard(choice2, state, 0, currentPlayer);
        -:  736:
        -:  737:      //discard card from hand
        -:  738:      discardCard(handPos, currentPlayer, state, 0);
        -:  739:
        -:  740:      //discard trashed card
        -:  741:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  742:	{
        -:  743:	  if (state->hand[currentPlayer][i] == j)
        -:  744:	    {
        -:  745:	      discardCard(i, currentPlayer, state, 0);			
        -:  746:	      break;
        -:  747:	    }
        -:  748:	}
        -:  749:
        -:  750:
        -:  751:      return 0;
        -:  752:}
        -:  753:int mineCard(struct gameState *state, int handPos, int choice1, int choice2){
        -:  754:	int i;
        -:  755:	int j;
        -:  756:	int currentPlayer = whoseTurn(state);
        -:  757:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  758:
        -:  759:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  760:	{
        -:  761:	  return j;
        -:  762:	}
        -:  763:		
        -:  764:      if (choice2 > treasure_map || choice2 < curse)
        -:  765:	{
        -:  766:	  return j;
        -:  767:	}
        -:  768:
        -:  769:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  770:	{
        -:  771:	  return j;
        -:  772:	}
        -:  773:
        -:  774:      gainCard(choice2, state, 2, currentPlayer);
        -:  775:
        -:  776:      //discard card from hand
        -:  777:      discardCard(handPos, currentPlayer, state, 0);
        -:  778:
        -:  779:      //discard trashed card
        -:  780:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  781:	{
        -:  782:	  if (state->hand[currentPlayer][i] == j)
        -:  783:	    {
        -:  784:	      discardCard(i, currentPlayer, state, 0);			
        -:  785:	      break;
        -:  786:	    }
        -:  787:	}
        -:  788:			
        -:  789:      return j;
        -:  790:	
        -:  791:}
        -:  792:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  793:{
        -:  794:  int i;
        -:  795:  int j;
        -:  796:  int k;
        -:  797:  int x;
        -:  798:  int index;
        -:  799:  int currentPlayer = whoseTurn(state);
        -:  800:  int nextPlayer = currentPlayer + 1;
        -:  801:
        -:  802:  int tributeRevealedCards[2] = {-1, -1};
        -:  803:  int temphand[MAX_HAND];// moved above the if statement
        -:  804://  int drawntreasure=0;
        -:  805://  int cardDrawn;
        -:  806://  int z = 0;// this is the counter for the temp hand
        -:  807:  if (nextPlayer > (state->numPlayers - 1)){
        -:  808:    nextPlayer = 0;
        -:  809:  }
        -:  810:  
        -:  811:	
        -:  812:  //uses switch to select card and perform actions
        -:  813:  switch( card ) 
        -:  814:    {
        -:  815:    case adventurer:
        -:  816:		return adventurerCard(state);
        -:  817:		
        -:  818:    case council_room:
        -:  819:		return councilRoomCard(state, handPos);
        -:  820:			
        -:  821:    case feast:
        -:  822:      //gain card with cost up to 5
        -:  823:      //Backup hand
        -:  824:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        -:  825:	temphand[i] = state->hand[currentPlayer][i];//Backup card
        -:  826:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  827:      }
        -:  828:      //Backup hand
        -:  829:
        -:  830:      //Update Coins for Buy
        -:  831:      updateCoins(currentPlayer, state, 5);
        -:  832:      x = 1;//Condition to loop on
        -:  833:      while( x == 1) {//Buy one card
        -:  834:	if (supplyCount(choice1, state) <= 0){
        -:  835:	  if (DEBUG)
        -:  836:	    printf("None of that card left, sorry!\n");
        -:  837:
        -:  838:	  if (DEBUG){
        -:  839:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  840:	  }
        -:  841:	}
        -:  842:	else if (state->coins < getCost(choice1)){
        -:  843:	  printf("That card is too expensive!\n");
        -:  844:
        -:  845:	  if (DEBUG){
        -:  846:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  847:	  }
        -:  848:	}
        -:  849:	else{
        -:  850:
        -:  851:	  if (DEBUG){
        -:  852:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  853:	  }
        -:  854:
        -:  855:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
        -:  856:	  x = 0;//No more buying cards
        -:  857:
        -:  858:	  if (DEBUG){
        -:  859:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  860:	  }
        -:  861:
        -:  862:	}
        -:  863:      }     
        -:  864:
        -:  865:      //Reset Hand
        -:  866:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        -:  867:	state->hand[currentPlayer][i] = temphand[i];
        -:  868:	temphand[i] = -1;
        -:  869:      }
        -:  870:      //Reset Hand
        -:  871:      			
        -:  872:      return 0;
        -:  873:			
        -:  874:    case gardens:
        -:  875:      return -1;
        -:  876:			
        -:  877:    case mine:
        -:  878:		return mineCard(state, handPos, choice1, choice2);
        -:  879:		
        -:  880:    case remodel:
        -:  881:		return remodelCard(state, handPos, choice1, choice2);
        -:  882: 	
        -:  883:    case smithy:
        -:  884:		return smithyCard(state, handPos); 
        -:  885:	
        -:  886:    case village:
        -:  887:      //+1 Card
        -:  888:      drawCard(currentPlayer, state);
        -:  889:			
        -:  890:      //+2 Actions
        -:  891:      state->numActions = state->numActions + 2;
        -:  892:			
        -:  893:      //discard played card from hand
        -:  894:      discardCard(handPos, currentPlayer, state, 0);
        -:  895:      return 0;
        -:  896:		
        -:  897:    case baron:
        -:  898:      state->numBuys++;//Increase buys by 1!
        -:  899:      if (choice1 > 0){//Boolean true or going to discard an estate
        -:  900:	int p = 0;//Iterator for hand!
        -:  901:	int card_not_discarded = 1;//Flag for discard set!
        -:  902:	while(card_not_discarded){
        -:  903:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
        -:  904:	    state->coins += 4;//Add 4 coins to the amount of coins
        -:  905:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
        -:  906:	    state->discardCount[currentPlayer]++;
        -:  907:	    for (;p < state->handCount[currentPlayer]; p++){
        -:  908:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  909:	    }
        -:  910:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
        -:  911:	    state->handCount[currentPlayer]--;
        -:  912:	    card_not_discarded = 0;//Exit the loop
        -:  913:	  }
        -:  914:	  else if (p > state->handCount[currentPlayer]){
        -:  915:	    if(DEBUG) {
        -:  916:	      printf("No estate cards in your hand, invalid choice\n");
        -:  917:	      printf("Must gain an estate if there are any\n");
        -:  918:	    }
        -:  919:	    if (supplyCount(estate, state) > 0){
        -:  920:	      gainCard(estate, state, 0, currentPlayer);
        -:  921:	      state->supplyCount[estate]--;//Decrement estates
        -:  922:	      if (supplyCount(estate, state) == 0){
        -:  923:		isGameOver(state);
        -:  924:	      }
        -:  925:	    }
        -:  926:	    card_not_discarded = 0;//Exit the loop
        -:  927:	  }
        -:  928:			    
        -:  929:	  else{
        -:  930:	    p++;//Next card
        -:  931:	  }
        -:  932:	}
        -:  933:      }
        -:  934:			    
        -:  935:      else{
        -:  936:	if (supplyCount(estate, state) > 0){
        -:  937:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
        -:  938:	  state->supplyCount[estate]--;//Decrement Estates
        -:  939:	  if (supplyCount(estate, state) == 0){
        -:  940:	    isGameOver(state);
        -:  941:	  }
        -:  942:	}
        -:  943:      }
        -:  944:	    
        -:  945:      
        -:  946:      return 0;
        -:  947:		
        -:  948:    case great_hall:
        -:  949:      //+1 Card
        -:  950:      drawCard(currentPlayer, state);
        -:  951:			
        -:  952:      //+1 Actions
        -:  953:      state->numActions++;
        -:  954:			
        -:  955:      //discard card from hand
        -:  956:      discardCard(handPos, currentPlayer, state, 0);
        -:  957:      return 0;
        -:  958:		
        -:  959:    case minion:
        -:  960:      //+1 action
        -:  961:      state->numActions++;
        -:  962:			
        -:  963:      //discard card from hand
        -:  964:      discardCard(handPos, currentPlayer, state, 0);
        -:  965:			
        -:  966:      if (choice1)		//+2 coins
        -:  967:	{
        -:  968:	  state->coins = state->coins + 2;
        -:  969:	}
        -:  970:			
        -:  971:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  972:	{
        -:  973:	  //discard hand
        -:  974:	  while(numHandCards(state) > 0)
        -:  975:	    {
        -:  976:	      discardCard(handPos, currentPlayer, state, 0);
        -:  977:	    }
        -:  978:				
        -:  979:	  //draw 4
        -:  980:	  for (i = 0; i < 4; i++)
        -:  981:	    {
        -:  982:	      drawCard(currentPlayer, state);
        -:  983:	    }
        -:  984:				
        -:  985:	  //other players discard hand and redraw if hand size > 4
        -:  986:	  for (i = 0; i < state->numPlayers; i++)
        -:  987:	    {
        -:  988:	      if (i != currentPlayer)
        -:  989:		{
        -:  990:		  if ( state->handCount[i] > 4 )
        -:  991:		    {
        -:  992:		      //discard hand
        -:  993:		      while( state->handCount[i] > 0 )
        -:  994:			{
        -:  995:			  discardCard(handPos, i, state, 0);
        -:  996:			}
        -:  997:							
        -:  998:		      //draw 4
        -:  999:		      for (j = 0; j < 4; j++)
        -: 1000:			{
        -: 1001:			  drawCard(i, state);
        -: 1002:			}
        -: 1003:		    }
        -: 1004:		}
        -: 1005:	    }
        -: 1006:				
        -: 1007:	}
        -: 1008:      return 0;
        -: 1009:		
        -: 1010:    case steward:
        -: 1011:      if (choice1 == 1)
        -: 1012:	{
        -: 1013:	  //+2 cards
        -: 1014:	  drawCard(currentPlayer, state);
        -: 1015:	  drawCard(currentPlayer, state);
        -: 1016:	}
        -: 1017:      else if (choice1 == 2)
        -: 1018:	{
        -: 1019:	  //+2 coins
        -: 1020:	  state->coins = state->coins + 2;
        -: 1021:	}
        -: 1022:      else
        -: 1023:	{
        -: 1024:	  //trash 2 cards in hand
        -: 1025:	  discardCard(choice2, currentPlayer, state, 1);
        -: 1026:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1027:	}
        -: 1028:			
        -: 1029:      //discard card from hand
        -: 1030:      discardCard(handPos, currentPlayer, state, 0);
        -: 1031:      return 0;
        -: 1032:		
        -: 1033:    case tribute:
        -: 1034:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
        -: 1035:	if (state->deckCount[nextPlayer] > 0){
        -: 1036:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        -: 1037:	  state->deckCount[nextPlayer]--;
        -: 1038:	}
        -: 1039:	else if (state->discardCount[nextPlayer] > 0){
        -: 1040:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
        -: 1041:	  state->discardCount[nextPlayer]--;
        -: 1042:	}
        -: 1043:	else{
        -: 1044:	  //No Card to Reveal
        -: 1045:	  if (DEBUG){
        -: 1046:	    printf("No cards to reveal\n");
        -: 1047:	  }
        -: 1048:	}
        -: 1049:      }
        -: 1050:	    
        -: 1051:      else{
        -: 1052:	if (state->deckCount[nextPlayer] == 0){
        -: 1053:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
        -: 1054:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
        -: 1055:	    state->deckCount[nextPlayer]++;
        -: 1056:	    state->discard[nextPlayer][i] = -1;
        -: 1057:	    state->discardCount[nextPlayer]--;
        -: 1058:	  }
        -: 1059:			    
        -: 1060:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1061:	} 
        -: 1062:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        -: 1063:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        -: 1064:	state->deckCount[nextPlayer]--;
        -: 1065:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        -: 1066:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        -: 1067:	state->deckCount[nextPlayer]--;
        -: 1068:      }    
        -: 1069:		       
        -: 1070:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
        -: 1071:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
        -: 1072:	state->playedCardCount++;
        -: 1073:	tributeRevealedCards[1] = -1;
        -: 1074:      }
        -: 1075:
        -: 1076:      for (i = 0; i <= 2; i ++){
        -: 1077:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
        -: 1078:	  state->coins += 2;
        -: 1079:	}
        -: 1080:		    
        -: 1081:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
        -: 1082:	  drawCard(currentPlayer, state);
        -: 1083:	  drawCard(currentPlayer, state);
        -: 1084:	}
        -: 1085:	else{//Action Card
        -: 1086:	  state->numActions = state->numActions + 2;
        -: 1087:	}
        -: 1088:      }
        -: 1089:	    
        -: 1090:      return 0;
        -: 1091:		
        -: 1092:    case ambassador:
        -: 1093:      j = 0;		//used to check if player has enough cards to discard
        -: 1094:
        -: 1095:      if (choice2 > 2 || choice2 < 0)
        -: 1096:	{
        -: 1097:	  return -1;				
        -: 1098:	}
        -: 1099:
        -: 1100:      if (choice1 == handPos)
        -: 1101:	{
        -: 1102:	  return -1;
        -: 1103:	}
        -: 1104:
        -: 1105:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1106:	{
        -: 1107:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1108:	    {
        -: 1109:	      j++;
        -: 1110:	    }
        -: 1111:	}
        -: 1112:      if (j < choice2)
        -: 1113:	{
        -: 1114:	  return -1;				
        -: 1115:	}
        -: 1116:
        -: 1117:      if (DEBUG) 
        -: 1118:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1119:
        -: 1120:      //increase supply count for choosen card by amount being discarded
        -: 1121:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1122:			
        -: 1123:      //each other player gains a copy of revealed card
        -: 1124:      for (i = 0; i < state->numPlayers; i++)
        -: 1125:	{
        -: 1126:	  if (i != currentPlayer)
        -: 1127:	    {
        -: 1128:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1129:	    }
        -: 1130:	}
        -: 1131:
        -: 1132:      //discard played card from hand
        -: 1133:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1134:
        -: 1135:      //trash copies of cards returned to supply
        -: 1136:      for (j = 0; j < choice2; j++)
        -: 1137:	{
        -: 1138:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1139:	    {
        -: 1140:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1141:		{
        -: 1142:		  discardCard(i, currentPlayer, state, 1);
        -: 1143:		  break;
        -: 1144:		}
        -: 1145:	    }
        -: 1146:	}			
        -: 1147:
        -: 1148:      return 0;
        -: 1149:		
        -: 1150:    case cutpurse:
        -: 1151:
        -: 1152:      updateCoins(currentPlayer, state, 2);
        -: 1153:      for (i = 0; i < state->numPlayers; i++)
        -: 1154:	{
        -: 1155:	  if (i != currentPlayer)
        -: 1156:	    {
        -: 1157:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1158:		{
        -: 1159:		  if (state->hand[i][j] == copper)
        -: 1160:		    {
        -: 1161:		      discardCard(j, i, state, 0);
        -: 1162:		      break;
        -: 1163:		    }
        -: 1164:		  if (j == state->handCount[i])
        -: 1165:		    {
        -: 1166:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1167:			{
        -: 1168:			  if (DEBUG)
        -: 1169:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1170:			}	
        -: 1171:		      break;
        -: 1172:		    }		
        -: 1173:		}
        -: 1174:					
        -: 1175:	    }
        -: 1176:				
        -: 1177:	}				
        -: 1178:
        -: 1179:      //discard played card from hand
        -: 1180:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1181:
        -: 1182:      return 0;
        -: 1183:
        -: 1184:		
        -: 1185:    case embargo: 
        -: 1186:      //+2 Coins
        -: 1187:      state->coins = state->coins + 2;
        -: 1188:			
        -: 1189:      //see if selected pile is in play
        -: 1190:      if ( state->supplyCount[choice1] == -1 )
        -: 1191:	{
        -: 1192:	  return -1;
        -: 1193:	}
        -: 1194:			
        -: 1195:      //add embargo token to selected supply pile
        -: 1196:      state->embargoTokens[choice1]++;
        -: 1197:			
        -: 1198:      //trash card
        -: 1199:      discardCard(handPos, currentPlayer, state, 1);		
        -: 1200:      return 0;
        -: 1201:		
        -: 1202:    case outpost:
        -: 1203:      //set outpost flag
        -: 1204:      state->outpostPlayed++;
        -: 1205:			
        -: 1206:      //discard card
        -: 1207:      discardCard(handPos, currentPlayer, state, 0);
        -: 1208:      return 0;
        -: 1209:		
        -: 1210:    case salvager:
        -: 1211:      //+1 buy
        -: 1212:      state->numBuys++;
        -: 1213:			
        -: 1214:      if (choice1)
        -: 1215:	{
        -: 1216:	  //gain coins equal to trashed card
        -: 1217:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1218:	  //trash card
        -: 1219:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1220:	}
        -: 1221:			
        -: 1222:      //discard card
        -: 1223:      discardCard(handPos, currentPlayer, state, 0);
        -: 1224:      return 0;
        -: 1225:		
        -: 1226:    case sea_hag:
        -: 1227:      for (i = 0; i < state->numPlayers; i++){
        -: 1228:	if (i != currentPlayer){
        -: 1229:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
        -: 1230:	  state->discardCount[i]++;
        -: 1231:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1232:	}
        -: 1233:      }
        -: 1234:      return 0;
        -: 1235:		
        -: 1236:    case treasure_map:
        -: 1237:      //search hand for another treasure_map
        -: 1238:      index = -1;
        -: 1239:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1240:	{
        -: 1241:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1242:	    {
        -: 1243:	      index = i;
        -: 1244:	      break;
        -: 1245:	    }
        -: 1246:	}
        -: 1247:      if (index > -1)
        -: 1248:	{
        -: 1249:	  //trash both treasure cards
        -: 1250:	  discardCard(handPos, currentPlayer, state, 1);
        -: 1251:	  discardCard(index, currentPlayer, state, 1);
        -: 1252:
        -: 1253:	  //gain 4 Gold cards
        -: 1254:	  for (i = 0; i < 4; i++)
        -: 1255:	    {
        -: 1256:	      gainCard(gold, state, 1, currentPlayer);
        -: 1257:	    }
        -: 1258:				
        -: 1259:	  //return success
        -: 1260:	  return 1;
        -: 1261:	}
        -: 1262:			
        -: 1263:      //no second treasure_map found in hand
        -: 1264:      return -1;
        -: 1265:    }
        -: 1266:	
        -: 1267:  return -1;
        -: 1268:}
        -: 1269:
        -: 1270:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1271:{
        -: 1272:	
        -: 1273:  //if card is not trashed, added to Played pile 
        -: 1274:  if (trashFlag < 1)
        -: 1275:    {
        -: 1276:      //add card to played pile
        -: 1277:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        -: 1278:      state->playedCardCount++;
        -: 1279:    }
        -: 1280:	
        -: 1281:  //set played card to -1
        -: 1282:  state->hand[currentPlayer][handPos] = -1;
        -: 1283:	
        -: 1284:  //remove card from player's hand
        -: 1285:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1286:    {
        -: 1287:      //reduce number of cards in hand
        -: 1288:      state->handCount[currentPlayer]--;
        -: 1289:    }
        -: 1290:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1291:    {
        -: 1292:      //reduce number of cards in hand
        -: 1293:      state->handCount[currentPlayer]--;
        -: 1294:    }
        -: 1295:  else 	
        -: 1296:    {
        -: 1297:      //replace discarded card with last card in hand
        -: 1298:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1299:      //set last card to -1
        -: 1300:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1301:      //reduce number of cards in hand
        -: 1302:      state->handCount[currentPlayer]--;
        -: 1303:    }
        -: 1304:	
        -: 1305:  return 0;
        -: 1306:}
        -: 1307:
        -: 1308:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1309:{
        -: 1310:  //Note: supplyPos is enum of choosen card
        -: 1311:	
        -: 1312:  //check if supply pile is empty (0) or card is not used in game (-1)
        -: 1313:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1314:    {
        -: 1315:      return -1;
        -: 1316:    }
        -: 1317:	
        -: 1318:  //added card for [whoseTurn] current player:
        -: 1319:  // toFlag = 0 : add to discard
        -: 1320:  // toFlag = 1 : add to deck
        -: 1321:  // toFlag = 2 : add to hand
        -: 1322:
        -: 1323:  if (toFlag == 1)
        -: 1324:    {
        -: 1325:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        -: 1326:      state->deckCount[player]++;
        -: 1327:    }
        -: 1328:  else if (toFlag == 2)
        -: 1329:    {
        -: 1330:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        -: 1331:      state->handCount[player]++;
        -: 1332:    }
        -: 1333:  else
        -: 1334:    {
        -: 1335:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        -: 1336:      state->discardCount[player]++;
        -: 1337:    }
        -: 1338:	
        -: 1339:  //decrease number in supply pile
        -: 1340:  state->supplyCount[supplyPos]--;
        -: 1341:	 
        -: 1342:  return 0;
        -: 1343:}
        -: 1344:
        -: 1345:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1346:{
        -: 1347:  int i;
        -: 1348:	
        -: 1349:  //reset coin count
        -: 1350:  state->coins = 0;
        -: 1351:
        -: 1352:  //add coins for each Treasure card in player's hand
        -: 1353:  for (i = 0; i < state->handCount[player]; i++)
        -: 1354: 
        -: 1355:    {
        -: 1356:      if (state->hand[player][i] == copper)
        -: 1357:	{
        -: 1358:	  state->coins += 1;
        -: 1359:	}
        -: 1360:      else if (state->hand[player][i] == silver)
        -: 1361:	{
        -: 1362:	  state->coins += 2;
        -: 1363:	}
        -: 1364:      else if (state->hand[player][i] == gold)
        -: 1365:	{
        -: 1366:	  state->coins += 3;
        -: 1367:	}	
        -: 1368:    }	
        -: 1369:
        -: 1370:  //add bonus
        -: 1371:  state->coins += bonus;
        -: 1372:
        -: 1373:  return 0;
        -: 1374:}
        -: 1375:
        -: 1376:
        -: 1377://end of dominion.c
        -: 1378:
